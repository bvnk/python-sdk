# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SummaryPaymentDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Contains all the information about a summary payment object
    """


    class MetaOapg:
        
        class properties:
            uuid = schemas.StrSchema
            merchantDisplayName = schemas.StrSchema
            merchantId = schemas.StrSchema
            dateCreated = schemas.Int64Schema
            expiryDate = schemas.Int64Schema
            quoteExpiryDate = schemas.Int64Schema
            acceptanceExpiryDate = schemas.Int64Schema
            quoteStatus = schemas.StrSchema
            reference = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['DirectionDto']:
                return DirectionDto
            
            
            class subType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "merchantPayIn": "MERCHANT_PAY_IN",
                        "merchantPayOut": "MERCHANT_PAY_OUT",
                        "merchantRefund": "MERCHANT_REFUND",
                    }
                
                @schemas.classproperty
                def MERCHANT_PAY_IN(cls):
                    return cls("merchantPayIn")
                
                @schemas.classproperty
                def MERCHANT_PAY_OUT(cls):
                    return cls("merchantPayOut")
                
                @schemas.classproperty
                def MERCHANT_REFUND(cls):
                    return cls("merchantRefund")
        
            @staticmethod
            def status() -> typing.Type['PaymentStatusDto']:
                return PaymentStatusDto
        
            @staticmethod
            def displayCurrency() -> typing.Type['PayAmountsDto']:
                return PayAmountsDto
        
            @staticmethod
            def walletCurrency() -> typing.Type['PayAmountsDto']:
                return PayAmountsDto
        
            @staticmethod
            def paidCurrency() -> typing.Type['PayAmountsDto']:
                return PayAmountsDto
        
            @staticmethod
            def feeCurrency() -> typing.Type['PayAmountsDto']:
                return PayAmountsDto
        
            @staticmethod
            def displayRate() -> typing.Type['ExchangeRateDto']:
                return ExchangeRateDto
        
            @staticmethod
            def exchangeRate() -> typing.Type['ExchangeRateDto']:
                return ExchangeRateDto
        
            @staticmethod
            def address() -> typing.Type['CryptoAddressDto']:
                return CryptoAddressDto
            returnUrl = schemas.StrSchema
            redirectUrl = schemas.StrSchema
            
            
            class transactions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GatewayTransactionDto']:
                        return GatewayTransactionDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['GatewayTransactionDto'], typing.List['GatewayTransactionDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GatewayTransactionDto':
                    return super().__getitem__(i)
            refund = schemas.DictSchema
            
            
            class refunds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'refunds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "uuid": uuid,
                "merchantDisplayName": merchantDisplayName,
                "merchantId": merchantId,
                "dateCreated": dateCreated,
                "expiryDate": expiryDate,
                "quoteExpiryDate": quoteExpiryDate,
                "acceptanceExpiryDate": acceptanceExpiryDate,
                "quoteStatus": quoteStatus,
                "reference": reference,
                "type": type,
                "subType": subType,
                "status": status,
                "displayCurrency": displayCurrency,
                "walletCurrency": walletCurrency,
                "paidCurrency": paidCurrency,
                "feeCurrency": feeCurrency,
                "displayRate": displayRate,
                "exchangeRate": exchangeRate,
                "address": address,
                "returnUrl": returnUrl,
                "redirectUrl": redirectUrl,
                "transactions": transactions,
                "refund": refund,
                "refunds": refunds,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantDisplayName"]) -> MetaOapg.properties.merchantDisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantId"]) -> MetaOapg.properties.merchantId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiryDate"]) -> MetaOapg.properties.expiryDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quoteExpiryDate"]) -> MetaOapg.properties.quoteExpiryDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acceptanceExpiryDate"]) -> MetaOapg.properties.acceptanceExpiryDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quoteStatus"]) -> MetaOapg.properties.quoteStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'DirectionDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subType"]) -> MetaOapg.properties.subType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'PaymentStatusDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayCurrency"]) -> 'PayAmountsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["walletCurrency"]) -> 'PayAmountsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paidCurrency"]) -> 'PayAmountsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeCurrency"]) -> 'PayAmountsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayRate"]) -> 'ExchangeRateDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchangeRate"]) -> 'ExchangeRateDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'CryptoAddressDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["returnUrl"]) -> MetaOapg.properties.returnUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirectUrl"]) -> MetaOapg.properties.redirectUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refund"]) -> MetaOapg.properties.refund: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refunds"]) -> MetaOapg.properties.refunds: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uuid", "merchantDisplayName", "merchantId", "dateCreated", "expiryDate", "quoteExpiryDate", "acceptanceExpiryDate", "quoteStatus", "reference", "type", "subType", "status", "displayCurrency", "walletCurrency", "paidCurrency", "feeCurrency", "displayRate", "exchangeRate", "address", "returnUrl", "redirectUrl", "transactions", "refund", "refunds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantDisplayName"]) -> typing.Union[MetaOapg.properties.merchantDisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantId"]) -> typing.Union[MetaOapg.properties.merchantId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiryDate"]) -> typing.Union[MetaOapg.properties.expiryDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quoteExpiryDate"]) -> typing.Union[MetaOapg.properties.quoteExpiryDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acceptanceExpiryDate"]) -> typing.Union[MetaOapg.properties.acceptanceExpiryDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quoteStatus"]) -> typing.Union[MetaOapg.properties.quoteStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union[MetaOapg.properties.reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['DirectionDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subType"]) -> typing.Union[MetaOapg.properties.subType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['PaymentStatusDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayCurrency"]) -> typing.Union['PayAmountsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["walletCurrency"]) -> typing.Union['PayAmountsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paidCurrency"]) -> typing.Union['PayAmountsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeCurrency"]) -> typing.Union['PayAmountsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayRate"]) -> typing.Union['ExchangeRateDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchangeRate"]) -> typing.Union['ExchangeRateDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['CryptoAddressDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["returnUrl"]) -> typing.Union[MetaOapg.properties.returnUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redirectUrl"]) -> typing.Union[MetaOapg.properties.redirectUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> typing.Union[MetaOapg.properties.transactions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refund"]) -> typing.Union[MetaOapg.properties.refund, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refunds"]) -> typing.Union[MetaOapg.properties.refunds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uuid", "merchantDisplayName", "merchantId", "dateCreated", "expiryDate", "quoteExpiryDate", "acceptanceExpiryDate", "quoteStatus", "reference", "type", "subType", "status", "displayCurrency", "walletCurrency", "paidCurrency", "feeCurrency", "displayRate", "exchangeRate", "address", "returnUrl", "redirectUrl", "transactions", "refund", "refunds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        merchantDisplayName: typing.Union[MetaOapg.properties.merchantDisplayName, str, schemas.Unset] = schemas.unset,
        merchantId: typing.Union[MetaOapg.properties.merchantId, str, schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expiryDate: typing.Union[MetaOapg.properties.expiryDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        quoteExpiryDate: typing.Union[MetaOapg.properties.quoteExpiryDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        acceptanceExpiryDate: typing.Union[MetaOapg.properties.acceptanceExpiryDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        quoteStatus: typing.Union[MetaOapg.properties.quoteStatus, str, schemas.Unset] = schemas.unset,
        reference: typing.Union[MetaOapg.properties.reference, str, schemas.Unset] = schemas.unset,
        type: typing.Union['DirectionDto', schemas.Unset] = schemas.unset,
        subType: typing.Union[MetaOapg.properties.subType, str, schemas.Unset] = schemas.unset,
        status: typing.Union['PaymentStatusDto', schemas.Unset] = schemas.unset,
        displayCurrency: typing.Union['PayAmountsDto', schemas.Unset] = schemas.unset,
        walletCurrency: typing.Union['PayAmountsDto', schemas.Unset] = schemas.unset,
        paidCurrency: typing.Union['PayAmountsDto', schemas.Unset] = schemas.unset,
        feeCurrency: typing.Union['PayAmountsDto', schemas.Unset] = schemas.unset,
        displayRate: typing.Union['ExchangeRateDto', schemas.Unset] = schemas.unset,
        exchangeRate: typing.Union['ExchangeRateDto', schemas.Unset] = schemas.unset,
        address: typing.Union['CryptoAddressDto', schemas.Unset] = schemas.unset,
        returnUrl: typing.Union[MetaOapg.properties.returnUrl, str, schemas.Unset] = schemas.unset,
        redirectUrl: typing.Union[MetaOapg.properties.redirectUrl, str, schemas.Unset] = schemas.unset,
        transactions: typing.Union[MetaOapg.properties.transactions, list, tuple, schemas.Unset] = schemas.unset,
        refund: typing.Union[MetaOapg.properties.refund, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        refunds: typing.Union[MetaOapg.properties.refunds, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SummaryPaymentDto':
        return super().__new__(
            cls,
            *_args,
            uuid=uuid,
            merchantDisplayName=merchantDisplayName,
            merchantId=merchantId,
            dateCreated=dateCreated,
            expiryDate=expiryDate,
            quoteExpiryDate=quoteExpiryDate,
            acceptanceExpiryDate=acceptanceExpiryDate,
            quoteStatus=quoteStatus,
            reference=reference,
            type=type,
            subType=subType,
            status=status,
            displayCurrency=displayCurrency,
            walletCurrency=walletCurrency,
            paidCurrency=paidCurrency,
            feeCurrency=feeCurrency,
            displayRate=displayRate,
            exchangeRate=exchangeRate,
            address=address,
            returnUrl=returnUrl,
            redirectUrl=redirectUrl,
            transactions=transactions,
            refund=refund,
            refunds=refunds,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.crypto_address_dto import CryptoAddressDto
from openapi_client.model.direction_dto import DirectionDto
from openapi_client.model.exchange_rate_dto import ExchangeRateDto
from openapi_client.model.gateway_transaction_dto import GatewayTransactionDto
from openapi_client.model.pay_amounts_dto import PayAmountsDto
from openapi_client.model.payment_status_dto import PaymentStatusDto
