# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MerchantChannelPayment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            channelId = schemas.StrSchema
            merchantId = schemas.StrSchema
            merchantDisplayName = schemas.StrSchema
            reference = schemas.StrSchema
            dateCreated = schemas.Int64Schema
            lastUpdated = schemas.Int64Schema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "DETECTED": "DETECTED",
                        "COMPLETE": "COMPLETE",
                        "UNKNOWN": "UNKNOWN",
                    }
                
                @schemas.classproperty
                def DETECTED(cls):
                    return cls("DETECTED")
                
                @schemas.classproperty
                def COMPLETE(cls):
                    return cls("COMPLETE")
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("UNKNOWN")
            uuid = schemas.StrSchema
            hash = schemas.StrSchema
            address = schemas.StrSchema
            tag = schemas.StrSchema
            paidCurrency = schemas.StrSchema
            displayCurrency = schemas.StrSchema
            walletCurrency = schemas.StrSchema
            feeCurrency = schemas.StrSchema
            paidAmount = schemas.NumberSchema
            displayAmount = schemas.NumberSchema
            walletAmount = schemas.NumberSchema
            feeAmount = schemas.NumberSchema
        
            @staticmethod
            def exchangeRate() -> typing.Type['ExchangeRateDto']:
                return ExchangeRateDto
        
            @staticmethod
            def displayRate() -> typing.Type['ExchangeRateDto']:
                return ExchangeRateDto
        
            @staticmethod
            def risk() -> typing.Type['ExchangeRateDto']:
                return ExchangeRateDto
            
            
            class sources(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sources':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def networkFee() -> typing.Type['NetworkFee']:
                return NetworkFee
            __annotations__ = {
                "channelId": channelId,
                "merchantId": merchantId,
                "merchantDisplayName": merchantDisplayName,
                "reference": reference,
                "dateCreated": dateCreated,
                "lastUpdated": lastUpdated,
                "status": status,
                "uuid": uuid,
                "hash": hash,
                "address": address,
                "tag": tag,
                "paidCurrency": paidCurrency,
                "displayCurrency": displayCurrency,
                "walletCurrency": walletCurrency,
                "feeCurrency": feeCurrency,
                "paidAmount": paidAmount,
                "displayAmount": displayAmount,
                "walletAmount": walletAmount,
                "feeAmount": feeAmount,
                "exchangeRate": exchangeRate,
                "displayRate": displayRate,
                "risk": risk,
                "sources": sources,
                "networkFee": networkFee,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channelId"]) -> MetaOapg.properties.channelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantId"]) -> MetaOapg.properties.merchantId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantDisplayName"]) -> MetaOapg.properties.merchantDisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdated"]) -> MetaOapg.properties.lastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hash"]) -> MetaOapg.properties.hash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paidCurrency"]) -> MetaOapg.properties.paidCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayCurrency"]) -> MetaOapg.properties.displayCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["walletCurrency"]) -> MetaOapg.properties.walletCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeCurrency"]) -> MetaOapg.properties.feeCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paidAmount"]) -> MetaOapg.properties.paidAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayAmount"]) -> MetaOapg.properties.displayAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["walletAmount"]) -> MetaOapg.properties.walletAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeAmount"]) -> MetaOapg.properties.feeAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchangeRate"]) -> 'ExchangeRateDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayRate"]) -> 'ExchangeRateDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["risk"]) -> 'ExchangeRateDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sources"]) -> MetaOapg.properties.sources: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networkFee"]) -> 'NetworkFee': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channelId", "merchantId", "merchantDisplayName", "reference", "dateCreated", "lastUpdated", "status", "uuid", "hash", "address", "tag", "paidCurrency", "displayCurrency", "walletCurrency", "feeCurrency", "paidAmount", "displayAmount", "walletAmount", "feeAmount", "exchangeRate", "displayRate", "risk", "sources", "networkFee", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channelId"]) -> typing.Union[MetaOapg.properties.channelId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantId"]) -> typing.Union[MetaOapg.properties.merchantId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantDisplayName"]) -> typing.Union[MetaOapg.properties.merchantDisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union[MetaOapg.properties.reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdated"]) -> typing.Union[MetaOapg.properties.lastUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hash"]) -> typing.Union[MetaOapg.properties.hash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paidCurrency"]) -> typing.Union[MetaOapg.properties.paidCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayCurrency"]) -> typing.Union[MetaOapg.properties.displayCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["walletCurrency"]) -> typing.Union[MetaOapg.properties.walletCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeCurrency"]) -> typing.Union[MetaOapg.properties.feeCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paidAmount"]) -> typing.Union[MetaOapg.properties.paidAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayAmount"]) -> typing.Union[MetaOapg.properties.displayAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["walletAmount"]) -> typing.Union[MetaOapg.properties.walletAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeAmount"]) -> typing.Union[MetaOapg.properties.feeAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchangeRate"]) -> typing.Union['ExchangeRateDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayRate"]) -> typing.Union['ExchangeRateDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["risk"]) -> typing.Union['ExchangeRateDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sources"]) -> typing.Union[MetaOapg.properties.sources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networkFee"]) -> typing.Union['NetworkFee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channelId", "merchantId", "merchantDisplayName", "reference", "dateCreated", "lastUpdated", "status", "uuid", "hash", "address", "tag", "paidCurrency", "displayCurrency", "walletCurrency", "feeCurrency", "paidAmount", "displayAmount", "walletAmount", "feeAmount", "exchangeRate", "displayRate", "risk", "sources", "networkFee", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        channelId: typing.Union[MetaOapg.properties.channelId, str, schemas.Unset] = schemas.unset,
        merchantId: typing.Union[MetaOapg.properties.merchantId, str, schemas.Unset] = schemas.unset,
        merchantDisplayName: typing.Union[MetaOapg.properties.merchantDisplayName, str, schemas.Unset] = schemas.unset,
        reference: typing.Union[MetaOapg.properties.reference, str, schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lastUpdated: typing.Union[MetaOapg.properties.lastUpdated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        hash: typing.Union[MetaOapg.properties.hash, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        paidCurrency: typing.Union[MetaOapg.properties.paidCurrency, str, schemas.Unset] = schemas.unset,
        displayCurrency: typing.Union[MetaOapg.properties.displayCurrency, str, schemas.Unset] = schemas.unset,
        walletCurrency: typing.Union[MetaOapg.properties.walletCurrency, str, schemas.Unset] = schemas.unset,
        feeCurrency: typing.Union[MetaOapg.properties.feeCurrency, str, schemas.Unset] = schemas.unset,
        paidAmount: typing.Union[MetaOapg.properties.paidAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        displayAmount: typing.Union[MetaOapg.properties.displayAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        walletAmount: typing.Union[MetaOapg.properties.walletAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        feeAmount: typing.Union[MetaOapg.properties.feeAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        exchangeRate: typing.Union['ExchangeRateDto', schemas.Unset] = schemas.unset,
        displayRate: typing.Union['ExchangeRateDto', schemas.Unset] = schemas.unset,
        risk: typing.Union['ExchangeRateDto', schemas.Unset] = schemas.unset,
        sources: typing.Union[MetaOapg.properties.sources, list, tuple, schemas.Unset] = schemas.unset,
        networkFee: typing.Union['NetworkFee', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MerchantChannelPayment':
        return super().__new__(
            cls,
            *_args,
            channelId=channelId,
            merchantId=merchantId,
            merchantDisplayName=merchantDisplayName,
            reference=reference,
            dateCreated=dateCreated,
            lastUpdated=lastUpdated,
            status=status,
            uuid=uuid,
            hash=hash,
            address=address,
            tag=tag,
            paidCurrency=paidCurrency,
            displayCurrency=displayCurrency,
            walletCurrency=walletCurrency,
            feeCurrency=feeCurrency,
            paidAmount=paidAmount,
            displayAmount=displayAmount,
            walletAmount=walletAmount,
            feeAmount=feeAmount,
            exchangeRate=exchangeRate,
            displayRate=displayRate,
            risk=risk,
            sources=sources,
            networkFee=networkFee,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.exchange_rate_dto import ExchangeRateDto
from openapi_client.model.network_fee import NetworkFee
