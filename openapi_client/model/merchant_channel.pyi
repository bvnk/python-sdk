# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MerchantChannel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            dateCreated = schemas.IntSchema
            lastUpdated = schemas.IntSchema
            merchantId = schemas.StrSchema
            walletCurrency = schemas.StrSchema
            displayCurrency = schemas.StrSchema
            payCurrency = schemas.StrSchema
            address = schemas.StrSchema
            tag = schemas.StrSchema
            protocol = schemas.StrSchema
            reference = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def OPEN(cls):
                    return cls("OPEN")
                
                @schemas.classproperty
                def CLOSED(cls):
                    return cls("CLOSED")
            uuid = schemas.StrSchema
            redirectUrl = schemas.StrSchema
            uri = schemas.StrSchema
            
            
            class alternatives(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AlternativeAddress']:
                        return AlternativeAddress
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AlternativeAddress'], typing.List['AlternativeAddress']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'alternatives':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AlternativeAddress':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "dateCreated": dateCreated,
                "lastUpdated": lastUpdated,
                "merchantId": merchantId,
                "walletCurrency": walletCurrency,
                "displayCurrency": displayCurrency,
                "payCurrency": payCurrency,
                "address": address,
                "tag": tag,
                "protocol": protocol,
                "reference": reference,
                "status": status,
                "uuid": uuid,
                "redirectUrl": redirectUrl,
                "uri": uri,
                "alternatives": alternatives,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdated"]) -> MetaOapg.properties.lastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantId"]) -> MetaOapg.properties.merchantId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["walletCurrency"]) -> MetaOapg.properties.walletCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayCurrency"]) -> MetaOapg.properties.displayCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payCurrency"]) -> MetaOapg.properties.payCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocol"]) -> MetaOapg.properties.protocol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirectUrl"]) -> MetaOapg.properties.redirectUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternatives"]) -> MetaOapg.properties.alternatives: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "dateCreated", "lastUpdated", "merchantId", "walletCurrency", "displayCurrency", "payCurrency", "address", "tag", "protocol", "reference", "status", "uuid", "redirectUrl", "uri", "alternatives", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdated"]) -> typing.Union[MetaOapg.properties.lastUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantId"]) -> typing.Union[MetaOapg.properties.merchantId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["walletCurrency"]) -> typing.Union[MetaOapg.properties.walletCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayCurrency"]) -> typing.Union[MetaOapg.properties.displayCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payCurrency"]) -> typing.Union[MetaOapg.properties.payCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocol"]) -> typing.Union[MetaOapg.properties.protocol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union[MetaOapg.properties.reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redirectUrl"]) -> typing.Union[MetaOapg.properties.redirectUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternatives"]) -> typing.Union[MetaOapg.properties.alternatives, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "dateCreated", "lastUpdated", "merchantId", "walletCurrency", "displayCurrency", "payCurrency", "address", "tag", "protocol", "reference", "status", "uuid", "redirectUrl", "uri", "alternatives", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lastUpdated: typing.Union[MetaOapg.properties.lastUpdated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        merchantId: typing.Union[MetaOapg.properties.merchantId, str, schemas.Unset] = schemas.unset,
        walletCurrency: typing.Union[MetaOapg.properties.walletCurrency, str, schemas.Unset] = schemas.unset,
        displayCurrency: typing.Union[MetaOapg.properties.displayCurrency, str, schemas.Unset] = schemas.unset,
        payCurrency: typing.Union[MetaOapg.properties.payCurrency, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        protocol: typing.Union[MetaOapg.properties.protocol, str, schemas.Unset] = schemas.unset,
        reference: typing.Union[MetaOapg.properties.reference, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        redirectUrl: typing.Union[MetaOapg.properties.redirectUrl, str, schemas.Unset] = schemas.unset,
        uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
        alternatives: typing.Union[MetaOapg.properties.alternatives, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MerchantChannel':
        return super().__new__(
            cls,
            *_args,
            id=id,
            dateCreated=dateCreated,
            lastUpdated=lastUpdated,
            merchantId=merchantId,
            walletCurrency=walletCurrency,
            displayCurrency=displayCurrency,
            payCurrency=payCurrency,
            address=address,
            tag=tag,
            protocol=protocol,
            reference=reference,
            status=status,
            uuid=uuid,
            redirectUrl=redirectUrl,
            uri=uri,
            alternatives=alternatives,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.alternative_address import AlternativeAddress
