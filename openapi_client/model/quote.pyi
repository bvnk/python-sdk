# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Quote(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            _from = schemas.StrSchema
            to = schemas.StrSchema
            amountIn = schemas.NumberSchema
            amountDue = schemas.NumberSchema
            amountOut = schemas.NumberSchema
            price = schemas.NumberSchema
            
            
            class quoteStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ESTIMATE(cls):
                    return cls("ESTIMATE")
                
                @schemas.classproperty
                def TEMPLATE(cls):
                    return cls("TEMPLATE")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def ACCEPTED(cls):
                    return cls("ACCEPTED")
                
                @schemas.classproperty
                def PAYMENT_IN_RECEIVED(cls):
                    return cls("PAYMENT_IN_RECEIVED")
                
                @schemas.classproperty
                def PAYMENT_IN_SEEN(cls):
                    return cls("PAYMENT_IN_SEEN")
                
                @schemas.classproperty
                def PAYMENT_IN_FAILED(cls):
                    return cls("PAYMENT_IN_FAILED")
                
                @schemas.classproperty
                def FRAUD_CHECK_PENDING(cls):
                    return cls("FRAUD_CHECK_PENDING")
                
                @schemas.classproperty
                def FRAUD_CHECK_FAILED(cls):
                    return cls("FRAUD_CHECK_FAILED")
                
                @schemas.classproperty
                def PAYMENT_OUT_PENDING(cls):
                    return cls("PAYMENT_OUT_PENDING")
                
                @schemas.classproperty
                def PAYMENT_OUT_PROCESSED(cls):
                    return cls("PAYMENT_OUT_PROCESSED")
                
                @schemas.classproperty
                def PAYMENT_OUT_USED(cls):
                    return cls("PAYMENT_OUT_USED")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("COMPLETED")
                
                @schemas.classproperty
                def CONVERSION_FAILED(cls):
                    return cls("CONVERSION_FAILED")
                
                @schemas.classproperty
                def PAYMENT_OUT_FAILED(cls):
                    return cls("PAYMENT_OUT_FAILED")
                
                @schemas.classproperty
                def LOCKED(cls):
                    return cls("LOCKED")
                
                @schemas.classproperty
                def REFUNDED(cls):
                    return cls("REFUNDED")
            
            
            class paymentStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def SEEN(cls):
                    return cls("SEEN")
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("SUCCESS")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def FRAUD_PENDING(cls):
                    return cls("FRAUD_PENDING")
                
                @schemas.classproperty
                def FRAUD_PENDING_MANUAL_REVIEW(cls):
                    return cls("FRAUD_PENDING_MANUAL_REVIEW")
                
                @schemas.classproperty
                def FRAUD_FAILED(cls):
                    return cls("FRAUD_FAILED")
                
                @schemas.classproperty
                def REFUND_PENDING(cls):
                    return cls("REFUND_PENDING")
                
                @schemas.classproperty
                def REFUNDED(cls):
                    return cls("REFUNDED")
                
                @schemas.classproperty
                def MANUAL_SUCCESS(cls):
                    return cls("MANUAL_SUCCESS")
                
                @schemas.classproperty
                def REFUND_FAILED(cls):
                    return cls("REFUND_FAILED")
            acceptanceExpiryDate = schemas.Int64Schema
            acceptanceDate = schemas.Int64Schema
            paymentExpiryDate = schemas.Int64Schema
            paymentReceiptDate = schemas.Int64Schema
            
            
            class payInLegs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PaymentLeg']:
                        return PaymentLeg
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PaymentLeg'], typing.List['PaymentLeg']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payInLegs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaymentLeg':
                    return super().__getitem__(i)
        
            @staticmethod
            def payInMethod() -> typing.Type['PayInMethod']:
                return PayInMethod
        
            @staticmethod
            def payOutMethod() -> typing.Type['PayOutMethod']:
                return PayOutMethod
            uuid = schemas.StrSchema
        
            @staticmethod
            def payOutInstruction() -> typing.Type['PayOutInstruction']:
                return PayOutInstruction
        
            @staticmethod
            def payInInstruction() -> typing.Type['PayInInstruction']:
                return PayInInstruction
        
            @staticmethod
            def usePayInMethod() -> typing.Type['AccountMethod']:
                return AccountMethod
        
            @staticmethod
            def usePayOutMethod() -> typing.Type['AccountMethod']:
                return AccountMethod
            fee = schemas.NumberSchema
            processingFee = schemas.NumberSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FIXED(cls):
                    return cls("FIXED")
                
                @schemas.classproperty
                def MARKET(cls):
                    return cls("MARKET")
            netPrice = schemas.NumberSchema
            grossPrice = schemas.NumberSchema
            amountInGross = schemas.NumberSchema
            amountInNet = schemas.NumberSchema
        
            @staticmethod
            def fees() -> typing.Type['Fees']:
                return Fees
            dateCreated = schemas.Int64Schema
            lastUpdated = schemas.Int64Schema
            __annotations__ = {
                "id": id,
                "from": _from,
                "to": to,
                "amountIn": amountIn,
                "amountDue": amountDue,
                "amountOut": amountOut,
                "price": price,
                "quoteStatus": quoteStatus,
                "paymentStatus": paymentStatus,
                "acceptanceExpiryDate": acceptanceExpiryDate,
                "acceptanceDate": acceptanceDate,
                "paymentExpiryDate": paymentExpiryDate,
                "paymentReceiptDate": paymentReceiptDate,
                "payInLegs": payInLegs,
                "payInMethod": payInMethod,
                "payOutMethod": payOutMethod,
                "uuid": uuid,
                "payOutInstruction": payOutInstruction,
                "payInInstruction": payInInstruction,
                "usePayInMethod": usePayInMethod,
                "usePayOutMethod": usePayOutMethod,
                "fee": fee,
                "processingFee": processingFee,
                "type": type,
                "netPrice": netPrice,
                "grossPrice": grossPrice,
                "amountInGross": amountInGross,
                "amountInNet": amountInNet,
                "fees": fees,
                "dateCreated": dateCreated,
                "lastUpdated": lastUpdated,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountIn"]) -> MetaOapg.properties.amountIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountDue"]) -> MetaOapg.properties.amountDue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountOut"]) -> MetaOapg.properties.amountOut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quoteStatus"]) -> MetaOapg.properties.quoteStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentStatus"]) -> MetaOapg.properties.paymentStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acceptanceExpiryDate"]) -> MetaOapg.properties.acceptanceExpiryDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acceptanceDate"]) -> MetaOapg.properties.acceptanceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentExpiryDate"]) -> MetaOapg.properties.paymentExpiryDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentReceiptDate"]) -> MetaOapg.properties.paymentReceiptDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payInLegs"]) -> MetaOapg.properties.payInLegs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payInMethod"]) -> 'PayInMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payOutMethod"]) -> 'PayOutMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payOutInstruction"]) -> 'PayOutInstruction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payInInstruction"]) -> 'PayInInstruction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usePayInMethod"]) -> 'AccountMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usePayOutMethod"]) -> 'AccountMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee"]) -> MetaOapg.properties.fee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processingFee"]) -> MetaOapg.properties.processingFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netPrice"]) -> MetaOapg.properties.netPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossPrice"]) -> MetaOapg.properties.grossPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountInGross"]) -> MetaOapg.properties.amountInGross: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountInNet"]) -> MetaOapg.properties.amountInNet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fees"]) -> 'Fees': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdated"]) -> MetaOapg.properties.lastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "from", "to", "amountIn", "amountDue", "amountOut", "price", "quoteStatus", "paymentStatus", "acceptanceExpiryDate", "acceptanceDate", "paymentExpiryDate", "paymentReceiptDate", "payInLegs", "payInMethod", "payOutMethod", "uuid", "payOutInstruction", "payInInstruction", "usePayInMethod", "usePayOutMethod", "fee", "processingFee", "type", "netPrice", "grossPrice", "amountInGross", "amountInNet", "fees", "dateCreated", "lastUpdated", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union[MetaOapg.properties.to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountIn"]) -> typing.Union[MetaOapg.properties.amountIn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountDue"]) -> typing.Union[MetaOapg.properties.amountDue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountOut"]) -> typing.Union[MetaOapg.properties.amountOut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quoteStatus"]) -> typing.Union[MetaOapg.properties.quoteStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentStatus"]) -> typing.Union[MetaOapg.properties.paymentStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acceptanceExpiryDate"]) -> typing.Union[MetaOapg.properties.acceptanceExpiryDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acceptanceDate"]) -> typing.Union[MetaOapg.properties.acceptanceDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentExpiryDate"]) -> typing.Union[MetaOapg.properties.paymentExpiryDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentReceiptDate"]) -> typing.Union[MetaOapg.properties.paymentReceiptDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payInLegs"]) -> typing.Union[MetaOapg.properties.payInLegs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payInMethod"]) -> typing.Union['PayInMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payOutMethod"]) -> typing.Union['PayOutMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payOutInstruction"]) -> typing.Union['PayOutInstruction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payInInstruction"]) -> typing.Union['PayInInstruction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usePayInMethod"]) -> typing.Union['AccountMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usePayOutMethod"]) -> typing.Union['AccountMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee"]) -> typing.Union[MetaOapg.properties.fee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processingFee"]) -> typing.Union[MetaOapg.properties.processingFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netPrice"]) -> typing.Union[MetaOapg.properties.netPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossPrice"]) -> typing.Union[MetaOapg.properties.grossPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountInGross"]) -> typing.Union[MetaOapg.properties.amountInGross, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountInNet"]) -> typing.Union[MetaOapg.properties.amountInNet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fees"]) -> typing.Union['Fees', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdated"]) -> typing.Union[MetaOapg.properties.lastUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "from", "to", "amountIn", "amountDue", "amountOut", "price", "quoteStatus", "paymentStatus", "acceptanceExpiryDate", "acceptanceDate", "paymentExpiryDate", "paymentReceiptDate", "payInLegs", "payInMethod", "payOutMethod", "uuid", "payOutInstruction", "payInInstruction", "usePayInMethod", "usePayOutMethod", "fee", "processingFee", "type", "netPrice", "grossPrice", "amountInGross", "amountInNet", "fees", "dateCreated", "lastUpdated", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        to: typing.Union[MetaOapg.properties.to, str, schemas.Unset] = schemas.unset,
        amountIn: typing.Union[MetaOapg.properties.amountIn, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountDue: typing.Union[MetaOapg.properties.amountDue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountOut: typing.Union[MetaOapg.properties.amountOut, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        quoteStatus: typing.Union[MetaOapg.properties.quoteStatus, str, schemas.Unset] = schemas.unset,
        paymentStatus: typing.Union[MetaOapg.properties.paymentStatus, str, schemas.Unset] = schemas.unset,
        acceptanceExpiryDate: typing.Union[MetaOapg.properties.acceptanceExpiryDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        acceptanceDate: typing.Union[MetaOapg.properties.acceptanceDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        paymentExpiryDate: typing.Union[MetaOapg.properties.paymentExpiryDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        paymentReceiptDate: typing.Union[MetaOapg.properties.paymentReceiptDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payInLegs: typing.Union[MetaOapg.properties.payInLegs, list, tuple, schemas.Unset] = schemas.unset,
        payInMethod: typing.Union['PayInMethod', schemas.Unset] = schemas.unset,
        payOutMethod: typing.Union['PayOutMethod', schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        payOutInstruction: typing.Union['PayOutInstruction', schemas.Unset] = schemas.unset,
        payInInstruction: typing.Union['PayInInstruction', schemas.Unset] = schemas.unset,
        usePayInMethod: typing.Union['AccountMethod', schemas.Unset] = schemas.unset,
        usePayOutMethod: typing.Union['AccountMethod', schemas.Unset] = schemas.unset,
        fee: typing.Union[MetaOapg.properties.fee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        processingFee: typing.Union[MetaOapg.properties.processingFee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        netPrice: typing.Union[MetaOapg.properties.netPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        grossPrice: typing.Union[MetaOapg.properties.grossPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountInGross: typing.Union[MetaOapg.properties.amountInGross, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountInNet: typing.Union[MetaOapg.properties.amountInNet, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fees: typing.Union['Fees', schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lastUpdated: typing.Union[MetaOapg.properties.lastUpdated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Quote':
        return super().__new__(
            cls,
            *_args,
            id=id,
            to=to,
            amountIn=amountIn,
            amountDue=amountDue,
            amountOut=amountOut,
            price=price,
            quoteStatus=quoteStatus,
            paymentStatus=paymentStatus,
            acceptanceExpiryDate=acceptanceExpiryDate,
            acceptanceDate=acceptanceDate,
            paymentExpiryDate=paymentExpiryDate,
            paymentReceiptDate=paymentReceiptDate,
            payInLegs=payInLegs,
            payInMethod=payInMethod,
            payOutMethod=payOutMethod,
            uuid=uuid,
            payOutInstruction=payOutInstruction,
            payInInstruction=payInInstruction,
            usePayInMethod=usePayInMethod,
            usePayOutMethod=usePayOutMethod,
            fee=fee,
            processingFee=processingFee,
            type=type,
            netPrice=netPrice,
            grossPrice=grossPrice,
            amountInGross=amountInGross,
            amountInNet=amountInNet,
            fees=fees,
            dateCreated=dateCreated,
            lastUpdated=lastUpdated,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.account_method import AccountMethod
from openapi_client.model.fees import Fees
from openapi_client.model.pay_in_instruction import PayInInstruction
from openapi_client.model.pay_in_method import PayInMethod
from openapi_client.model.pay_out_instruction import PayOutInstruction
from openapi_client.model.pay_out_method import PayOutMethod
from openapi_client.model.payment_leg import PaymentLeg
