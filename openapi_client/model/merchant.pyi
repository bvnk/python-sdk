# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Merchant(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            merchantId = schemas.StrSchema
            displayName = schemas.StrSchema
            secret = schemas.StrSchema
            webhookUrl = schemas.StrSchema
            autoConvertInvalidPayments = schemas.BoolSchema
            defaultExpiryMinutes = schemas.Int32Schema
            webhookVersion = schemas.Int32Schema
        
            @staticmethod
            def wallet() -> typing.Type['Wallet']:
                return Wallet
            emailRecipients = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "merchantId": merchantId,
                "displayName": displayName,
                "secret": secret,
                "webhookUrl": webhookUrl,
                "autoConvertInvalidPayments": autoConvertInvalidPayments,
                "defaultExpiryMinutes": defaultExpiryMinutes,
                "webhookVersion": webhookVersion,
                "wallet": wallet,
                "emailRecipients": emailRecipients,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantId"]) -> MetaOapg.properties.merchantId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhookUrl"]) -> MetaOapg.properties.webhookUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoConvertInvalidPayments"]) -> MetaOapg.properties.autoConvertInvalidPayments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultExpiryMinutes"]) -> MetaOapg.properties.defaultExpiryMinutes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhookVersion"]) -> MetaOapg.properties.webhookVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet"]) -> 'Wallet': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailRecipients"]) -> MetaOapg.properties.emailRecipients: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "merchantId", "displayName", "secret", "webhookUrl", "autoConvertInvalidPayments", "defaultExpiryMinutes", "webhookVersion", "wallet", "emailRecipients", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantId"]) -> typing.Union[MetaOapg.properties.merchantId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhookUrl"]) -> typing.Union[MetaOapg.properties.webhookUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoConvertInvalidPayments"]) -> typing.Union[MetaOapg.properties.autoConvertInvalidPayments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultExpiryMinutes"]) -> typing.Union[MetaOapg.properties.defaultExpiryMinutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhookVersion"]) -> typing.Union[MetaOapg.properties.webhookVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet"]) -> typing.Union['Wallet', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailRecipients"]) -> typing.Union[MetaOapg.properties.emailRecipients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "merchantId", "displayName", "secret", "webhookUrl", "autoConvertInvalidPayments", "defaultExpiryMinutes", "webhookVersion", "wallet", "emailRecipients", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        merchantId: typing.Union[MetaOapg.properties.merchantId, str, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        webhookUrl: typing.Union[MetaOapg.properties.webhookUrl, str, schemas.Unset] = schemas.unset,
        autoConvertInvalidPayments: typing.Union[MetaOapg.properties.autoConvertInvalidPayments, bool, schemas.Unset] = schemas.unset,
        defaultExpiryMinutes: typing.Union[MetaOapg.properties.defaultExpiryMinutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        webhookVersion: typing.Union[MetaOapg.properties.webhookVersion, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wallet: typing.Union['Wallet', schemas.Unset] = schemas.unset,
        emailRecipients: typing.Union[MetaOapg.properties.emailRecipients, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Merchant':
        return super().__new__(
            cls,
            *_args,
            id=id,
            merchantId=merchantId,
            displayName=displayName,
            secret=secret,
            webhookUrl=webhookUrl,
            autoConvertInvalidPayments=autoConvertInvalidPayments,
            defaultExpiryMinutes=defaultExpiryMinutes,
            webhookVersion=webhookVersion,
            wallet=wallet,
            emailRecipients=emailRecipients,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.wallet import Wallet
