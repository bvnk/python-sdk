# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class NetworkFee(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            paidCurrency = schemas.StrSchema
            paidAmount = schemas.NumberSchema
            displayCurrency = schemas.StrSchema
            displayAmount = schemas.NumberSchema
            __annotations__ = {
                "paidCurrency": paidCurrency,
                "paidAmount": paidAmount,
                "displayCurrency": displayCurrency,
                "displayAmount": displayAmount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paidCurrency"]) -> MetaOapg.properties.paidCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paidAmount"]) -> MetaOapg.properties.paidAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayCurrency"]) -> MetaOapg.properties.displayCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayAmount"]) -> MetaOapg.properties.displayAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["paidCurrency", "paidAmount", "displayCurrency", "displayAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paidCurrency"]) -> typing.Union[MetaOapg.properties.paidCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paidAmount"]) -> typing.Union[MetaOapg.properties.paidAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayCurrency"]) -> typing.Union[MetaOapg.properties.displayCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayAmount"]) -> typing.Union[MetaOapg.properties.displayAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["paidCurrency", "paidAmount", "displayCurrency", "displayAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        paidCurrency: typing.Union[MetaOapg.properties.paidCurrency, str, schemas.Unset] = schemas.unset,
        paidAmount: typing.Union[MetaOapg.properties.paidAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        displayCurrency: typing.Union[MetaOapg.properties.displayCurrency, str, schemas.Unset] = schemas.unset,
        displayAmount: typing.Union[MetaOapg.properties.displayAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NetworkFee':
        return super().__new__(
            cls,
            *_args,
            paidCurrency=paidCurrency,
            paidAmount=paidAmount,
            displayCurrency=displayCurrency,
            displayAmount=displayAmount,
            _configuration=_configuration,
            **kwargs,
        )
