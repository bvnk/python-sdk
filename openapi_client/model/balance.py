# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Balance(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
            walletId = schemas.Int64Schema
            available = schemas.NumberSchema
            reserved = schemas.NumberSchema
            convertedAvailable = schemas.NumberSchema
            convertedReserved = schemas.NumberSchema
            total = schemas.NumberSchema
            __annotations__ = {
                "currency": currency,
                "walletId": walletId,
                "available": available,
                "reserved": reserved,
                "convertedAvailable": convertedAvailable,
                "convertedReserved": convertedReserved,
                "total": total,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["walletId"]) -> MetaOapg.properties.walletId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available"]) -> MetaOapg.properties.available: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reserved"]) -> MetaOapg.properties.reserved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["convertedAvailable"]) -> MetaOapg.properties.convertedAvailable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["convertedReserved"]) -> MetaOapg.properties.convertedReserved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["currency", "walletId", "available", "reserved", "convertedAvailable", "convertedReserved", "total", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['Currency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["walletId"]) -> typing.Union[MetaOapg.properties.walletId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available"]) -> typing.Union[MetaOapg.properties.available, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reserved"]) -> typing.Union[MetaOapg.properties.reserved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["convertedAvailable"]) -> typing.Union[MetaOapg.properties.convertedAvailable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["convertedReserved"]) -> typing.Union[MetaOapg.properties.convertedReserved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currency", "walletId", "available", "reserved", "convertedAvailable", "convertedReserved", "total", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        currency: typing.Union['Currency', schemas.Unset] = schemas.unset,
        walletId: typing.Union[MetaOapg.properties.walletId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        available: typing.Union[MetaOapg.properties.available, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        reserved: typing.Union[MetaOapg.properties.reserved, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        convertedAvailable: typing.Union[MetaOapg.properties.convertedAvailable, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        convertedReserved: typing.Union[MetaOapg.properties.convertedReserved, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Balance':
        return super().__new__(
            cls,
            *_args,
            currency=currency,
            walletId=walletId,
            available=available,
            reserved=reserved,
            convertedAvailable=convertedAvailable,
            convertedReserved=convertedReserved,
            total=total,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.currency import Currency
