# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TransactionReportRequestData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            type = schemas.StrSchema
            externalProcessing = schemas.StrSchema
            walletId = schemas.Int64Schema
            transactionType = schemas.StrSchema
            fromDate = schemas.StrSchema
            toDate = schemas.StrSchema
            format = schemas.StrSchema
            languageTag = schemas.StrSchema
            category = schemas.IntSchema
            accountName = schemas.StrSchema
            include = schemas.StrSchema
            exclude = schemas.StrSchema
            __annotations__ = {
                "type": type,
                "externalProcessing": externalProcessing,
                "walletId": walletId,
                "transactionType": transactionType,
                "fromDate": fromDate,
                "toDate": toDate,
                "format": format,
                "languageTag": languageTag,
                "category": category,
                "accountName": accountName,
                "include": include,
                "exclude": exclude,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalProcessing"]) -> MetaOapg.properties.externalProcessing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["walletId"]) -> MetaOapg.properties.walletId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionType"]) -> MetaOapg.properties.transactionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromDate"]) -> MetaOapg.properties.fromDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toDate"]) -> MetaOapg.properties.toDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["languageTag"]) -> MetaOapg.properties.languageTag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountName"]) -> MetaOapg.properties.accountName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["include"]) -> MetaOapg.properties.include: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclude"]) -> MetaOapg.properties.exclude: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "externalProcessing", "walletId", "transactionType", "fromDate", "toDate", "format", "languageTag", "category", "accountName", "include", "exclude", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalProcessing"]) -> typing.Union[MetaOapg.properties.externalProcessing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["walletId"]) -> typing.Union[MetaOapg.properties.walletId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionType"]) -> typing.Union[MetaOapg.properties.transactionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromDate"]) -> typing.Union[MetaOapg.properties.fromDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toDate"]) -> typing.Union[MetaOapg.properties.toDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union[MetaOapg.properties.format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["languageTag"]) -> typing.Union[MetaOapg.properties.languageTag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountName"]) -> typing.Union[MetaOapg.properties.accountName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["include"]) -> typing.Union[MetaOapg.properties.include, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclude"]) -> typing.Union[MetaOapg.properties.exclude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "externalProcessing", "walletId", "transactionType", "fromDate", "toDate", "format", "languageTag", "category", "accountName", "include", "exclude", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        externalProcessing: typing.Union[MetaOapg.properties.externalProcessing, str, schemas.Unset] = schemas.unset,
        walletId: typing.Union[MetaOapg.properties.walletId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        transactionType: typing.Union[MetaOapg.properties.transactionType, str, schemas.Unset] = schemas.unset,
        fromDate: typing.Union[MetaOapg.properties.fromDate, str, schemas.Unset] = schemas.unset,
        toDate: typing.Union[MetaOapg.properties.toDate, str, schemas.Unset] = schemas.unset,
        format: typing.Union[MetaOapg.properties.format, str, schemas.Unset] = schemas.unset,
        languageTag: typing.Union[MetaOapg.properties.languageTag, str, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        accountName: typing.Union[MetaOapg.properties.accountName, str, schemas.Unset] = schemas.unset,
        include: typing.Union[MetaOapg.properties.include, str, schemas.Unset] = schemas.unset,
        exclude: typing.Union[MetaOapg.properties.exclude, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransactionReportRequestData':
        return super().__new__(
            cls,
            *_args,
            type=type,
            externalProcessing=externalProcessing,
            walletId=walletId,
            transactionType=transactionType,
            fromDate=fromDate,
            toDate=toDate,
            format=format,
            languageTag=languageTag,
            category=category,
            accountName=accountName,
            include=include,
            exclude=exclude,
            _configuration=_configuration,
            **kwargs,
        )
