# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrencyOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction': 'str',
        'explorer': 'str',
        'address': 'str',
        'confirmations': 'int'
    }

    attribute_map = {
        'transaction': 'transaction',
        'explorer': 'explorer',
        'address': 'address',
        'confirmations': 'confirmations'
    }

    def __init__(self, transaction=None, explorer=None, address=None, confirmations=None):  # noqa: E501
        """CurrencyOptions - a model defined in Swagger"""  # noqa: E501
        self._transaction = None
        self._explorer = None
        self._address = None
        self._confirmations = None
        self.discriminator = None
        if transaction is not None:
            self.transaction = transaction
        if explorer is not None:
            self.explorer = explorer
        if address is not None:
            self.address = address
        if confirmations is not None:
            self.confirmations = confirmations

    @property
    def transaction(self):
        """Gets the transaction of this CurrencyOptions.  # noqa: E501


        :return: The transaction of this CurrencyOptions.  # noqa: E501
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this CurrencyOptions.


        :param transaction: The transaction of this CurrencyOptions.  # noqa: E501
        :type: str
        """

        self._transaction = transaction

    @property
    def explorer(self):
        """Gets the explorer of this CurrencyOptions.  # noqa: E501


        :return: The explorer of this CurrencyOptions.  # noqa: E501
        :rtype: str
        """
        return self._explorer

    @explorer.setter
    def explorer(self, explorer):
        """Sets the explorer of this CurrencyOptions.


        :param explorer: The explorer of this CurrencyOptions.  # noqa: E501
        :type: str
        """

        self._explorer = explorer

    @property
    def address(self):
        """Gets the address of this CurrencyOptions.  # noqa: E501


        :return: The address of this CurrencyOptions.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CurrencyOptions.


        :param address: The address of this CurrencyOptions.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def confirmations(self):
        """Gets the confirmations of this CurrencyOptions.  # noqa: E501


        :return: The confirmations of this CurrencyOptions.  # noqa: E501
        :rtype: int
        """
        return self._confirmations

    @confirmations.setter
    def confirmations(self, confirmations):
        """Sets the confirmations of this CurrencyOptions.


        :param confirmations: The confirmations of this CurrencyOptions.  # noqa: E501
        :type: int
        """

        self._confirmations = confirmations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrencyOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrencyOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
