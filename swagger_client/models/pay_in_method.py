# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PayInMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'code': 'str',
        'settlement_currency': 'str',
        'requested_currency': 'str',
        'estimated_exchange_rate': 'float',
        'account_methods': 'list[AccountMethod]'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'settlement_currency': 'settlementCurrency',
        'requested_currency': 'requestedCurrency',
        'estimated_exchange_rate': 'estimatedExchangeRate',
        'account_methods': 'accountMethods'
    }

    def __init__(self, id=None, code=None, settlement_currency=None, requested_currency=None, estimated_exchange_rate=None, account_methods=None):  # noqa: E501
        """PayInMethod - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._code = None
        self._settlement_currency = None
        self._requested_currency = None
        self._estimated_exchange_rate = None
        self._account_methods = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if settlement_currency is not None:
            self.settlement_currency = settlement_currency
        if requested_currency is not None:
            self.requested_currency = requested_currency
        if estimated_exchange_rate is not None:
            self.estimated_exchange_rate = estimated_exchange_rate
        if account_methods is not None:
            self.account_methods = account_methods

    @property
    def id(self):
        """Gets the id of this PayInMethod.  # noqa: E501


        :return: The id of this PayInMethod.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PayInMethod.


        :param id: The id of this PayInMethod.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this PayInMethod.  # noqa: E501


        :return: The code of this PayInMethod.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PayInMethod.


        :param code: The code of this PayInMethod.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def settlement_currency(self):
        """Gets the settlement_currency of this PayInMethod.  # noqa: E501


        :return: The settlement_currency of this PayInMethod.  # noqa: E501
        :rtype: str
        """
        return self._settlement_currency

    @settlement_currency.setter
    def settlement_currency(self, settlement_currency):
        """Sets the settlement_currency of this PayInMethod.


        :param settlement_currency: The settlement_currency of this PayInMethod.  # noqa: E501
        :type: str
        """

        self._settlement_currency = settlement_currency

    @property
    def requested_currency(self):
        """Gets the requested_currency of this PayInMethod.  # noqa: E501


        :return: The requested_currency of this PayInMethod.  # noqa: E501
        :rtype: str
        """
        return self._requested_currency

    @requested_currency.setter
    def requested_currency(self, requested_currency):
        """Sets the requested_currency of this PayInMethod.


        :param requested_currency: The requested_currency of this PayInMethod.  # noqa: E501
        :type: str
        """

        self._requested_currency = requested_currency

    @property
    def estimated_exchange_rate(self):
        """Gets the estimated_exchange_rate of this PayInMethod.  # noqa: E501


        :return: The estimated_exchange_rate of this PayInMethod.  # noqa: E501
        :rtype: float
        """
        return self._estimated_exchange_rate

    @estimated_exchange_rate.setter
    def estimated_exchange_rate(self, estimated_exchange_rate):
        """Sets the estimated_exchange_rate of this PayInMethod.


        :param estimated_exchange_rate: The estimated_exchange_rate of this PayInMethod.  # noqa: E501
        :type: float
        """

        self._estimated_exchange_rate = estimated_exchange_rate

    @property
    def account_methods(self):
        """Gets the account_methods of this PayInMethod.  # noqa: E501


        :return: The account_methods of this PayInMethod.  # noqa: E501
        :rtype: list[AccountMethod]
        """
        return self._account_methods

    @account_methods.setter
    def account_methods(self, account_methods):
        """Sets the account_methods of this PayInMethod.


        :param account_methods: The account_methods of this PayInMethod.  # noqa: E501
        :type: list[AccountMethod]
        """

        self._account_methods = account_methods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayInMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayInMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
