# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'uuid': 'str',
        'date_created': 'int',
        'last_updated': 'int',
        'expiry_date': 'int',
        'status': 'str',
        'type': 'str',
        'request_data': 'TransactionReportRequestData'
    }

    attribute_map = {
        'id': 'id',
        'uuid': 'uuid',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'expiry_date': 'expiryDate',
        'status': 'status',
        'type': 'type',
        'request_data': 'requestData'
    }

    def __init__(self, id=None, uuid=None, date_created=None, last_updated=None, expiry_date=None, status=None, type=None, request_data=None):  # noqa: E501
        """TransactionReport - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uuid = None
        self._date_created = None
        self._last_updated = None
        self._expiry_date = None
        self._status = None
        self._type = None
        self._request_data = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid
        if date_created is not None:
            self.date_created = date_created
        if last_updated is not None:
            self.last_updated = last_updated
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if request_data is not None:
            self.request_data = request_data

    @property
    def id(self):
        """Gets the id of this TransactionReport.  # noqa: E501


        :return: The id of this TransactionReport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionReport.


        :param id: The id of this TransactionReport.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this TransactionReport.  # noqa: E501


        :return: The uuid of this TransactionReport.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this TransactionReport.


        :param uuid: The uuid of this TransactionReport.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def date_created(self):
        """Gets the date_created of this TransactionReport.  # noqa: E501


        :return: The date_created of this TransactionReport.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this TransactionReport.


        :param date_created: The date_created of this TransactionReport.  # noqa: E501
        :type: int
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this TransactionReport.  # noqa: E501


        :return: The last_updated of this TransactionReport.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this TransactionReport.


        :param last_updated: The last_updated of this TransactionReport.  # noqa: E501
        :type: int
        """

        self._last_updated = last_updated

    @property
    def expiry_date(self):
        """Gets the expiry_date of this TransactionReport.  # noqa: E501


        :return: The expiry_date of this TransactionReport.  # noqa: E501
        :rtype: int
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this TransactionReport.


        :param expiry_date: The expiry_date of this TransactionReport.  # noqa: E501
        :type: int
        """

        self._expiry_date = expiry_date

    @property
    def status(self):
        """Gets the status of this TransactionReport.  # noqa: E501


        :return: The status of this TransactionReport.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransactionReport.


        :param status: The status of this TransactionReport.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this TransactionReport.  # noqa: E501


        :return: The type of this TransactionReport.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionReport.


        :param type: The type of this TransactionReport.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def request_data(self):
        """Gets the request_data of this TransactionReport.  # noqa: E501


        :return: The request_data of this TransactionReport.  # noqa: E501
        :rtype: TransactionReportRequestData
        """
        return self._request_data

    @request_data.setter
    def request_data(self, request_data):
        """Sets the request_data of this TransactionReport.


        :param request_data: The request_data of this TransactionReport.  # noqa: E501
        :type: TransactionReportRequestData
        """

        self._request_data = request_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
