# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantChannelRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_id': 'str',
        'pay_currency': 'str',
        'display_currency': 'str',
        'reference': 'str'
    }

    attribute_map = {
        'merchant_id': 'merchantId',
        'pay_currency': 'payCurrency',
        'display_currency': 'displayCurrency',
        'reference': 'reference'
    }

    def __init__(self, merchant_id='0a12a214-1619-43fa-9be1-0029f6a440a0', pay_currency='ETH', display_currency='EUR', reference='c1b933d5-3354-4f83-a05f-0b53f1be85f2'):  # noqa: E501
        """MerchantChannelRequest - a model defined in Swagger"""  # noqa: E501
        self._merchant_id = None
        self._pay_currency = None
        self._display_currency = None
        self._reference = None
        self.discriminator = None
        self.merchant_id = merchant_id
        self.pay_currency = pay_currency
        self.display_currency = display_currency
        self.reference = reference

    @property
    def merchant_id(self):
        """Gets the merchant_id of this MerchantChannelRequest.  # noqa: E501

        The merchant ID that you are creating the channel on.  # noqa: E501

        :return: The merchant_id of this MerchantChannelRequest.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this MerchantChannelRequest.

        The merchant ID that you are creating the channel on.  # noqa: E501

        :param merchant_id: The merchant_id of this MerchantChannelRequest.  # noqa: E501
        :type: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")  # noqa: E501

        self._merchant_id = merchant_id

    @property
    def pay_currency(self):
        """Gets the pay_currency of this MerchantChannelRequest.  # noqa: E501

        Cryptocurrency code that the channel will operate on.  # noqa: E501

        :return: The pay_currency of this MerchantChannelRequest.  # noqa: E501
        :rtype: str
        """
        return self._pay_currency

    @pay_currency.setter
    def pay_currency(self, pay_currency):
        """Sets the pay_currency of this MerchantChannelRequest.

        Cryptocurrency code that the channel will operate on.  # noqa: E501

        :param pay_currency: The pay_currency of this MerchantChannelRequest.  # noqa: E501
        :type: str
        """
        if pay_currency is None:
            raise ValueError("Invalid value for `pay_currency`, must not be `None`")  # noqa: E501

        self._pay_currency = pay_currency

    @property
    def display_currency(self):
        """Gets the display_currency of this MerchantChannelRequest.  # noqa: E501

        The currency which pricing will be displayed to the end user in (can be the same as payCurrency, or can be different).  # noqa: E501

        :return: The display_currency of this MerchantChannelRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_currency

    @display_currency.setter
    def display_currency(self, display_currency):
        """Sets the display_currency of this MerchantChannelRequest.

        The currency which pricing will be displayed to the end user in (can be the same as payCurrency, or can be different).  # noqa: E501

        :param display_currency: The display_currency of this MerchantChannelRequest.  # noqa: E501
        :type: str
        """
        if display_currency is None:
            raise ValueError("Invalid value for `display_currency`, must not be `None`")  # noqa: E501

        self._display_currency = display_currency

    @property
    def reference(self):
        """Gets the reference of this MerchantChannelRequest.  # noqa: E501

        An external reference for the channel that your customer will see.  # noqa: E501

        :return: The reference of this MerchantChannelRequest.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this MerchantChannelRequest.

        An external reference for the channel that your customer will see.  # noqa: E501

        :param reference: The reference of this MerchantChannelRequest.  # noqa: E501
        :type: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")  # noqa: E501

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantChannelRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantChannelRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
