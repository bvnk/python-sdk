# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Quote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        '_from': 'str',
        'to': 'str',
        'amount_in': 'float',
        'amount_due': 'float',
        'amount_out': 'float',
        'price': 'float',
        'quote_status': 'str',
        'payment_status': 'str',
        'acceptance_expiry_date': 'int',
        'acceptance_date': 'int',
        'payment_expiry_date': 'int',
        'payment_receipt_date': 'int',
        'pay_in_legs': 'list[PaymentLeg]',
        'pay_in_method': 'PayInMethod',
        'pay_out_method': 'PayOutMethod',
        'uuid': 'str',
        'pay_out_instruction': 'PayOutInstruction',
        'pay_in_instruction': 'PayInInstruction',
        'use_pay_in_method': 'AccountMethod',
        'use_pay_out_method': 'AccountMethod',
        'fee': 'float',
        'processing_fee': 'float',
        'type': 'str',
        'net_price': 'float',
        'gross_price': 'float',
        'amount_in_gross': 'float',
        'amount_in_net': 'float',
        'fees': 'Fees',
        'date_created': 'int',
        'last_updated': 'int'
    }

    attribute_map = {
        'id': 'id',
        '_from': 'from',
        'to': 'to',
        'amount_in': 'amountIn',
        'amount_due': 'amountDue',
        'amount_out': 'amountOut',
        'price': 'price',
        'quote_status': 'quoteStatus',
        'payment_status': 'paymentStatus',
        'acceptance_expiry_date': 'acceptanceExpiryDate',
        'acceptance_date': 'acceptanceDate',
        'payment_expiry_date': 'paymentExpiryDate',
        'payment_receipt_date': 'paymentReceiptDate',
        'pay_in_legs': 'payInLegs',
        'pay_in_method': 'payInMethod',
        'pay_out_method': 'payOutMethod',
        'uuid': 'uuid',
        'pay_out_instruction': 'payOutInstruction',
        'pay_in_instruction': 'payInInstruction',
        'use_pay_in_method': 'usePayInMethod',
        'use_pay_out_method': 'usePayOutMethod',
        'fee': 'fee',
        'processing_fee': 'processingFee',
        'type': 'type',
        'net_price': 'netPrice',
        'gross_price': 'grossPrice',
        'amount_in_gross': 'amountInGross',
        'amount_in_net': 'amountInNet',
        'fees': 'fees',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated'
    }

    def __init__(self, id=None, _from=None, to=None, amount_in=None, amount_due=None, amount_out=None, price=None, quote_status=None, payment_status=None, acceptance_expiry_date=None, acceptance_date=None, payment_expiry_date=None, payment_receipt_date=None, pay_in_legs=None, pay_in_method=None, pay_out_method=None, uuid=None, pay_out_instruction=None, pay_in_instruction=None, use_pay_in_method=None, use_pay_out_method=None, fee=None, processing_fee=None, type=None, net_price=None, gross_price=None, amount_in_gross=None, amount_in_net=None, fees=None, date_created=None, last_updated=None):  # noqa: E501
        """Quote - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self.__from = None
        self._to = None
        self._amount_in = None
        self._amount_due = None
        self._amount_out = None
        self._price = None
        self._quote_status = None
        self._payment_status = None
        self._acceptance_expiry_date = None
        self._acceptance_date = None
        self._payment_expiry_date = None
        self._payment_receipt_date = None
        self._pay_in_legs = None
        self._pay_in_method = None
        self._pay_out_method = None
        self._uuid = None
        self._pay_out_instruction = None
        self._pay_in_instruction = None
        self._use_pay_in_method = None
        self._use_pay_out_method = None
        self._fee = None
        self._processing_fee = None
        self._type = None
        self._net_price = None
        self._gross_price = None
        self._amount_in_gross = None
        self._amount_in_net = None
        self._fees = None
        self._date_created = None
        self._last_updated = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if amount_in is not None:
            self.amount_in = amount_in
        if amount_due is not None:
            self.amount_due = amount_due
        if amount_out is not None:
            self.amount_out = amount_out
        if price is not None:
            self.price = price
        if quote_status is not None:
            self.quote_status = quote_status
        if payment_status is not None:
            self.payment_status = payment_status
        if acceptance_expiry_date is not None:
            self.acceptance_expiry_date = acceptance_expiry_date
        if acceptance_date is not None:
            self.acceptance_date = acceptance_date
        if payment_expiry_date is not None:
            self.payment_expiry_date = payment_expiry_date
        if payment_receipt_date is not None:
            self.payment_receipt_date = payment_receipt_date
        if pay_in_legs is not None:
            self.pay_in_legs = pay_in_legs
        if pay_in_method is not None:
            self.pay_in_method = pay_in_method
        if pay_out_method is not None:
            self.pay_out_method = pay_out_method
        if uuid is not None:
            self.uuid = uuid
        if pay_out_instruction is not None:
            self.pay_out_instruction = pay_out_instruction
        if pay_in_instruction is not None:
            self.pay_in_instruction = pay_in_instruction
        if use_pay_in_method is not None:
            self.use_pay_in_method = use_pay_in_method
        if use_pay_out_method is not None:
            self.use_pay_out_method = use_pay_out_method
        if fee is not None:
            self.fee = fee
        if processing_fee is not None:
            self.processing_fee = processing_fee
        if type is not None:
            self.type = type
        if net_price is not None:
            self.net_price = net_price
        if gross_price is not None:
            self.gross_price = gross_price
        if amount_in_gross is not None:
            self.amount_in_gross = amount_in_gross
        if amount_in_net is not None:
            self.amount_in_net = amount_in_net
        if fees is not None:
            self.fees = fees
        if date_created is not None:
            self.date_created = date_created
        if last_updated is not None:
            self.last_updated = last_updated

    @property
    def id(self):
        """Gets the id of this Quote.  # noqa: E501


        :return: The id of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Quote.


        :param id: The id of this Quote.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def _from(self):
        """Gets the _from of this Quote.  # noqa: E501


        :return: The _from of this Quote.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Quote.


        :param _from: The _from of this Quote.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this Quote.  # noqa: E501


        :return: The to of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Quote.


        :param to: The to of this Quote.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def amount_in(self):
        """Gets the amount_in of this Quote.  # noqa: E501


        :return: The amount_in of this Quote.  # noqa: E501
        :rtype: float
        """
        return self._amount_in

    @amount_in.setter
    def amount_in(self, amount_in):
        """Sets the amount_in of this Quote.


        :param amount_in: The amount_in of this Quote.  # noqa: E501
        :type: float
        """

        self._amount_in = amount_in

    @property
    def amount_due(self):
        """Gets the amount_due of this Quote.  # noqa: E501


        :return: The amount_due of this Quote.  # noqa: E501
        :rtype: float
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this Quote.


        :param amount_due: The amount_due of this Quote.  # noqa: E501
        :type: float
        """

        self._amount_due = amount_due

    @property
    def amount_out(self):
        """Gets the amount_out of this Quote.  # noqa: E501


        :return: The amount_out of this Quote.  # noqa: E501
        :rtype: float
        """
        return self._amount_out

    @amount_out.setter
    def amount_out(self, amount_out):
        """Sets the amount_out of this Quote.


        :param amount_out: The amount_out of this Quote.  # noqa: E501
        :type: float
        """

        self._amount_out = amount_out

    @property
    def price(self):
        """Gets the price of this Quote.  # noqa: E501


        :return: The price of this Quote.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Quote.


        :param price: The price of this Quote.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def quote_status(self):
        """Gets the quote_status of this Quote.  # noqa: E501


        :return: The quote_status of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._quote_status

    @quote_status.setter
    def quote_status(self, quote_status):
        """Sets the quote_status of this Quote.


        :param quote_status: The quote_status of this Quote.  # noqa: E501
        :type: str
        """
        allowed_values = ["ESTIMATE", "TEMPLATE", "PENDING", "ACCEPTED", "PAYMENT_IN_RECEIVED", "PAYMENT_IN_SEEN", "PAYMENT_IN_FAILED", "FRAUD_CHECK_PENDING", "FRAUD_CHECK_FAILED", "PAYMENT_OUT_PENDING", "PAYMENT_OUT_PROCESSED", "PAYMENT_OUT_USED", "COMPLETED", "CONVERSION_FAILED", "PAYMENT_OUT_FAILED", "LOCKED", "REFUNDED"]  # noqa: E501
        if quote_status not in allowed_values:
            raise ValueError(
                "Invalid value for `quote_status` ({0}), must be one of {1}"  # noqa: E501
                .format(quote_status, allowed_values)
            )

        self._quote_status = quote_status

    @property
    def payment_status(self):
        """Gets the payment_status of this Quote.  # noqa: E501


        :return: The payment_status of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this Quote.


        :param payment_status: The payment_status of this Quote.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "SEEN", "SUCCESS", "CANCELLED", "FAILED", "FRAUD_PENDING", "FRAUD_PENDING_MANUAL_REVIEW", "FRAUD_FAILED", "REFUND_PENDING", "REFUNDED", "MANUAL_SUCCESS", "REFUND_FAILED"]  # noqa: E501
        if payment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_status, allowed_values)
            )

        self._payment_status = payment_status

    @property
    def acceptance_expiry_date(self):
        """Gets the acceptance_expiry_date of this Quote.  # noqa: E501


        :return: The acceptance_expiry_date of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._acceptance_expiry_date

    @acceptance_expiry_date.setter
    def acceptance_expiry_date(self, acceptance_expiry_date):
        """Sets the acceptance_expiry_date of this Quote.


        :param acceptance_expiry_date: The acceptance_expiry_date of this Quote.  # noqa: E501
        :type: int
        """

        self._acceptance_expiry_date = acceptance_expiry_date

    @property
    def acceptance_date(self):
        """Gets the acceptance_date of this Quote.  # noqa: E501


        :return: The acceptance_date of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._acceptance_date

    @acceptance_date.setter
    def acceptance_date(self, acceptance_date):
        """Sets the acceptance_date of this Quote.


        :param acceptance_date: The acceptance_date of this Quote.  # noqa: E501
        :type: int
        """

        self._acceptance_date = acceptance_date

    @property
    def payment_expiry_date(self):
        """Gets the payment_expiry_date of this Quote.  # noqa: E501


        :return: The payment_expiry_date of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._payment_expiry_date

    @payment_expiry_date.setter
    def payment_expiry_date(self, payment_expiry_date):
        """Sets the payment_expiry_date of this Quote.


        :param payment_expiry_date: The payment_expiry_date of this Quote.  # noqa: E501
        :type: int
        """

        self._payment_expiry_date = payment_expiry_date

    @property
    def payment_receipt_date(self):
        """Gets the payment_receipt_date of this Quote.  # noqa: E501


        :return: The payment_receipt_date of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._payment_receipt_date

    @payment_receipt_date.setter
    def payment_receipt_date(self, payment_receipt_date):
        """Sets the payment_receipt_date of this Quote.


        :param payment_receipt_date: The payment_receipt_date of this Quote.  # noqa: E501
        :type: int
        """

        self._payment_receipt_date = payment_receipt_date

    @property
    def pay_in_legs(self):
        """Gets the pay_in_legs of this Quote.  # noqa: E501


        :return: The pay_in_legs of this Quote.  # noqa: E501
        :rtype: list[PaymentLeg]
        """
        return self._pay_in_legs

    @pay_in_legs.setter
    def pay_in_legs(self, pay_in_legs):
        """Sets the pay_in_legs of this Quote.


        :param pay_in_legs: The pay_in_legs of this Quote.  # noqa: E501
        :type: list[PaymentLeg]
        """

        self._pay_in_legs = pay_in_legs

    @property
    def pay_in_method(self):
        """Gets the pay_in_method of this Quote.  # noqa: E501


        :return: The pay_in_method of this Quote.  # noqa: E501
        :rtype: PayInMethod
        """
        return self._pay_in_method

    @pay_in_method.setter
    def pay_in_method(self, pay_in_method):
        """Sets the pay_in_method of this Quote.


        :param pay_in_method: The pay_in_method of this Quote.  # noqa: E501
        :type: PayInMethod
        """

        self._pay_in_method = pay_in_method

    @property
    def pay_out_method(self):
        """Gets the pay_out_method of this Quote.  # noqa: E501


        :return: The pay_out_method of this Quote.  # noqa: E501
        :rtype: PayOutMethod
        """
        return self._pay_out_method

    @pay_out_method.setter
    def pay_out_method(self, pay_out_method):
        """Sets the pay_out_method of this Quote.


        :param pay_out_method: The pay_out_method of this Quote.  # noqa: E501
        :type: PayOutMethod
        """

        self._pay_out_method = pay_out_method

    @property
    def uuid(self):
        """Gets the uuid of this Quote.  # noqa: E501


        :return: The uuid of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Quote.


        :param uuid: The uuid of this Quote.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def pay_out_instruction(self):
        """Gets the pay_out_instruction of this Quote.  # noqa: E501


        :return: The pay_out_instruction of this Quote.  # noqa: E501
        :rtype: PayOutInstruction
        """
        return self._pay_out_instruction

    @pay_out_instruction.setter
    def pay_out_instruction(self, pay_out_instruction):
        """Sets the pay_out_instruction of this Quote.


        :param pay_out_instruction: The pay_out_instruction of this Quote.  # noqa: E501
        :type: PayOutInstruction
        """

        self._pay_out_instruction = pay_out_instruction

    @property
    def pay_in_instruction(self):
        """Gets the pay_in_instruction of this Quote.  # noqa: E501


        :return: The pay_in_instruction of this Quote.  # noqa: E501
        :rtype: PayInInstruction
        """
        return self._pay_in_instruction

    @pay_in_instruction.setter
    def pay_in_instruction(self, pay_in_instruction):
        """Sets the pay_in_instruction of this Quote.


        :param pay_in_instruction: The pay_in_instruction of this Quote.  # noqa: E501
        :type: PayInInstruction
        """

        self._pay_in_instruction = pay_in_instruction

    @property
    def use_pay_in_method(self):
        """Gets the use_pay_in_method of this Quote.  # noqa: E501


        :return: The use_pay_in_method of this Quote.  # noqa: E501
        :rtype: AccountMethod
        """
        return self._use_pay_in_method

    @use_pay_in_method.setter
    def use_pay_in_method(self, use_pay_in_method):
        """Sets the use_pay_in_method of this Quote.


        :param use_pay_in_method: The use_pay_in_method of this Quote.  # noqa: E501
        :type: AccountMethod
        """

        self._use_pay_in_method = use_pay_in_method

    @property
    def use_pay_out_method(self):
        """Gets the use_pay_out_method of this Quote.  # noqa: E501


        :return: The use_pay_out_method of this Quote.  # noqa: E501
        :rtype: AccountMethod
        """
        return self._use_pay_out_method

    @use_pay_out_method.setter
    def use_pay_out_method(self, use_pay_out_method):
        """Sets the use_pay_out_method of this Quote.


        :param use_pay_out_method: The use_pay_out_method of this Quote.  # noqa: E501
        :type: AccountMethod
        """

        self._use_pay_out_method = use_pay_out_method

    @property
    def fee(self):
        """Gets the fee of this Quote.  # noqa: E501


        :return: The fee of this Quote.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this Quote.


        :param fee: The fee of this Quote.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def processing_fee(self):
        """Gets the processing_fee of this Quote.  # noqa: E501


        :return: The processing_fee of this Quote.  # noqa: E501
        :rtype: float
        """
        return self._processing_fee

    @processing_fee.setter
    def processing_fee(self, processing_fee):
        """Sets the processing_fee of this Quote.


        :param processing_fee: The processing_fee of this Quote.  # noqa: E501
        :type: float
        """

        self._processing_fee = processing_fee

    @property
    def type(self):
        """Gets the type of this Quote.  # noqa: E501


        :return: The type of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Quote.


        :param type: The type of this Quote.  # noqa: E501
        :type: str
        """
        allowed_values = ["FIXED", "MARKET"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def net_price(self):
        """Gets the net_price of this Quote.  # noqa: E501


        :return: The net_price of this Quote.  # noqa: E501
        :rtype: float
        """
        return self._net_price

    @net_price.setter
    def net_price(self, net_price):
        """Sets the net_price of this Quote.


        :param net_price: The net_price of this Quote.  # noqa: E501
        :type: float
        """

        self._net_price = net_price

    @property
    def gross_price(self):
        """Gets the gross_price of this Quote.  # noqa: E501


        :return: The gross_price of this Quote.  # noqa: E501
        :rtype: float
        """
        return self._gross_price

    @gross_price.setter
    def gross_price(self, gross_price):
        """Sets the gross_price of this Quote.


        :param gross_price: The gross_price of this Quote.  # noqa: E501
        :type: float
        """

        self._gross_price = gross_price

    @property
    def amount_in_gross(self):
        """Gets the amount_in_gross of this Quote.  # noqa: E501


        :return: The amount_in_gross of this Quote.  # noqa: E501
        :rtype: float
        """
        return self._amount_in_gross

    @amount_in_gross.setter
    def amount_in_gross(self, amount_in_gross):
        """Sets the amount_in_gross of this Quote.


        :param amount_in_gross: The amount_in_gross of this Quote.  # noqa: E501
        :type: float
        """

        self._amount_in_gross = amount_in_gross

    @property
    def amount_in_net(self):
        """Gets the amount_in_net of this Quote.  # noqa: E501


        :return: The amount_in_net of this Quote.  # noqa: E501
        :rtype: float
        """
        return self._amount_in_net

    @amount_in_net.setter
    def amount_in_net(self, amount_in_net):
        """Sets the amount_in_net of this Quote.


        :param amount_in_net: The amount_in_net of this Quote.  # noqa: E501
        :type: float
        """

        self._amount_in_net = amount_in_net

    @property
    def fees(self):
        """Gets the fees of this Quote.  # noqa: E501


        :return: The fees of this Quote.  # noqa: E501
        :rtype: Fees
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this Quote.


        :param fees: The fees of this Quote.  # noqa: E501
        :type: Fees
        """

        self._fees = fees

    @property
    def date_created(self):
        """Gets the date_created of this Quote.  # noqa: E501


        :return: The date_created of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Quote.


        :param date_created: The date_created of this Quote.  # noqa: E501
        :type: int
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this Quote.  # noqa: E501


        :return: The last_updated of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Quote.


        :param last_updated: The last_updated of this Quote.  # noqa: E501
        :type: int
        """

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Quote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Quote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
