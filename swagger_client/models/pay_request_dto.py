# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PayRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_id': 'str',
        'amount': 'float',
        'expiry_minutes': 'int',
        'currency': 'str',
        'return_url': 'str',
        'reference': 'str',
        'type': 'DirectionDto',
        'pay_in_details': 'PayInDetailDto',
        'pay_out_details': 'PayOutDetailDto'
    }

    attribute_map = {
        'merchant_id': 'merchantId',
        'amount': 'amount',
        'expiry_minutes': 'expiryMinutes',
        'currency': 'currency',
        'return_url': 'returnUrl',
        'reference': 'reference',
        'type': 'type',
        'pay_in_details': 'payInDetails',
        'pay_out_details': 'payOutDetails'
    }

    def __init__(self, merchant_id='5C8D8D78-366A-4AFB-B658-A64CE543C5DB', amount=223.05, expiry_minutes=20, currency='EUR', return_url='https://my-shop.com/payment-complete?ref=xyz', reference='myUniqueRef333', type=None, pay_in_details=None, pay_out_details=None):  # noqa: E501
        """PayRequestDto - a model defined in Swagger"""  # noqa: E501
        self._merchant_id = None
        self._amount = None
        self._expiry_minutes = None
        self._currency = None
        self._return_url = None
        self._reference = None
        self._type = None
        self._pay_in_details = None
        self._pay_out_details = None
        self.discriminator = None
        self.merchant_id = merchant_id
        self.amount = amount
        if expiry_minutes is not None:
            self.expiry_minutes = expiry_minutes
        self.currency = currency
        if return_url is not None:
            self.return_url = return_url
        self.reference = reference
        self.type = type
        if pay_in_details is not None:
            self.pay_in_details = pay_in_details
        if pay_out_details is not None:
            self.pay_out_details = pay_out_details

    @property
    def merchant_id(self):
        """Gets the merchant_id of this PayRequestDto.  # noqa: E501

        Your Merchant ID. You can find it on the Merchant Details page in your account  # noqa: E501

        :return: The merchant_id of this PayRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this PayRequestDto.

        Your Merchant ID. You can find it on the Merchant Details page in your account  # noqa: E501

        :param merchant_id: The merchant_id of this PayRequestDto.  # noqa: E501
        :type: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")  # noqa: E501

        self._merchant_id = merchant_id

    @property
    def amount(self):
        """Gets the amount of this PayRequestDto.  # noqa: E501

        payment amount  # noqa: E501

        :return: The amount of this PayRequestDto.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PayRequestDto.

        payment amount  # noqa: E501

        :param amount: The amount of this PayRequestDto.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def expiry_minutes(self):
        """Gets the expiry_minutes of this PayRequestDto.  # noqa: E501

        time period after which payment expires  # noqa: E501

        :return: The expiry_minutes of this PayRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._expiry_minutes

    @expiry_minutes.setter
    def expiry_minutes(self, expiry_minutes):
        """Sets the expiry_minutes of this PayRequestDto.

        time period after which payment expires  # noqa: E501

        :param expiry_minutes: The expiry_minutes of this PayRequestDto.  # noqa: E501
        :type: int
        """

        self._expiry_minutes = expiry_minutes

    @property
    def currency(self):
        """Gets the currency of this PayRequestDto.  # noqa: E501

        currency acronym  # noqa: E501

        :return: The currency of this PayRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PayRequestDto.

        currency acronym  # noqa: E501

        :param currency: The currency of this PayRequestDto.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def return_url(self):
        """Gets the return_url of this PayRequestDto.  # noqa: E501

        URL that the customer will be redirected to if they click a 'Back to Merchant' button on the payment web page  # noqa: E501

        :return: The return_url of this PayRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this PayRequestDto.

        URL that the customer will be redirected to if they click a 'Back to Merchant' button on the payment web page  # noqa: E501

        :param return_url: The return_url of this PayRequestDto.  # noqa: E501
        :type: str
        """

        self._return_url = return_url

    @property
    def reference(self):
        """Gets the reference of this PayRequestDto.  # noqa: E501

        Your payment reference ID. Feel free to submit any ID to tie the payment to your customer  # noqa: E501

        :return: The reference of this PayRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PayRequestDto.

        Your payment reference ID. Feel free to submit any ID to tie the payment to your customer  # noqa: E501

        :param reference: The reference of this PayRequestDto.  # noqa: E501
        :type: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")  # noqa: E501

        self._reference = reference

    @property
    def type(self):
        """Gets the type of this PayRequestDto.  # noqa: E501


        :return: The type of this PayRequestDto.  # noqa: E501
        :rtype: DirectionDto
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PayRequestDto.


        :param type: The type of this PayRequestDto.  # noqa: E501
        :type: DirectionDto
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def pay_in_details(self):
        """Gets the pay_in_details of this PayRequestDto.  # noqa: E501


        :return: The pay_in_details of this PayRequestDto.  # noqa: E501
        :rtype: PayInDetailDto
        """
        return self._pay_in_details

    @pay_in_details.setter
    def pay_in_details(self, pay_in_details):
        """Sets the pay_in_details of this PayRequestDto.


        :param pay_in_details: The pay_in_details of this PayRequestDto.  # noqa: E501
        :type: PayInDetailDto
        """

        self._pay_in_details = pay_in_details

    @property
    def pay_out_details(self):
        """Gets the pay_out_details of this PayRequestDto.  # noqa: E501


        :return: The pay_out_details of this PayRequestDto.  # noqa: E501
        :rtype: PayOutDetailDto
        """
        return self._pay_out_details

    @pay_out_details.setter
    def pay_out_details(self, pay_out_details):
        """Sets the pay_out_details of this PayRequestDto.


        :param pay_out_details: The pay_out_details of this PayRequestDto.  # noqa: E501
        :type: PayOutDetailDto
        """

        self._pay_out_details = pay_out_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
