# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Balance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'Currency',
        'wallet_id': 'int',
        'available': 'float',
        'reserved': 'float',
        'converted_available': 'float',
        'converted_reserved': 'float',
        'total': 'float'
    }

    attribute_map = {
        'currency': 'currency',
        'wallet_id': 'walletId',
        'available': 'available',
        'reserved': 'reserved',
        'converted_available': 'convertedAvailable',
        'converted_reserved': 'convertedReserved',
        'total': 'total'
    }

    def __init__(self, currency=None, wallet_id=None, available=None, reserved=None, converted_available=None, converted_reserved=None, total=None):  # noqa: E501
        """Balance - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._wallet_id = None
        self._available = None
        self._reserved = None
        self._converted_available = None
        self._converted_reserved = None
        self._total = None
        self.discriminator = None
        if currency is not None:
            self.currency = currency
        if wallet_id is not None:
            self.wallet_id = wallet_id
        if available is not None:
            self.available = available
        if reserved is not None:
            self.reserved = reserved
        if converted_available is not None:
            self.converted_available = converted_available
        if converted_reserved is not None:
            self.converted_reserved = converted_reserved
        if total is not None:
            self.total = total

    @property
    def currency(self):
        """Gets the currency of this Balance.  # noqa: E501


        :return: The currency of this Balance.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Balance.


        :param currency: The currency of this Balance.  # noqa: E501
        :type: Currency
        """

        self._currency = currency

    @property
    def wallet_id(self):
        """Gets the wallet_id of this Balance.  # noqa: E501


        :return: The wallet_id of this Balance.  # noqa: E501
        :rtype: int
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this Balance.


        :param wallet_id: The wallet_id of this Balance.  # noqa: E501
        :type: int
        """

        self._wallet_id = wallet_id

    @property
    def available(self):
        """Gets the available of this Balance.  # noqa: E501


        :return: The available of this Balance.  # noqa: E501
        :rtype: float
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Balance.


        :param available: The available of this Balance.  # noqa: E501
        :type: float
        """

        self._available = available

    @property
    def reserved(self):
        """Gets the reserved of this Balance.  # noqa: E501


        :return: The reserved of this Balance.  # noqa: E501
        :rtype: float
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this Balance.


        :param reserved: The reserved of this Balance.  # noqa: E501
        :type: float
        """

        self._reserved = reserved

    @property
    def converted_available(self):
        """Gets the converted_available of this Balance.  # noqa: E501


        :return: The converted_available of this Balance.  # noqa: E501
        :rtype: float
        """
        return self._converted_available

    @converted_available.setter
    def converted_available(self, converted_available):
        """Sets the converted_available of this Balance.


        :param converted_available: The converted_available of this Balance.  # noqa: E501
        :type: float
        """

        self._converted_available = converted_available

    @property
    def converted_reserved(self):
        """Gets the converted_reserved of this Balance.  # noqa: E501


        :return: The converted_reserved of this Balance.  # noqa: E501
        :rtype: float
        """
        return self._converted_reserved

    @converted_reserved.setter
    def converted_reserved(self, converted_reserved):
        """Sets the converted_reserved of this Balance.


        :param converted_reserved: The converted_reserved of this Balance.  # noqa: E501
        :type: float
        """

        self._converted_reserved = converted_reserved

    @property
    def total(self):
        """Gets the total of this Balance.  # noqa: E501


        :return: The total of this Balance.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Balance.


        :param total: The total of this Balance.  # noqa: E501
        :type: float
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Balance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Balance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
