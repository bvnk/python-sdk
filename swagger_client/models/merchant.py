# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Merchant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'merchant_id': 'str',
        'display_name': 'str',
        'secret': 'str',
        'webhook_url': 'str',
        'auto_convert_invalid_payments': 'bool',
        'default_expiry_minutes': 'int',
        'webhook_version': 'int',
        'wallet': 'Wallet',
        'email_recipients': 'str'
    }

    attribute_map = {
        'id': 'id',
        'merchant_id': 'merchantId',
        'display_name': 'displayName',
        'secret': 'secret',
        'webhook_url': 'webhookUrl',
        'auto_convert_invalid_payments': 'autoConvertInvalidPayments',
        'default_expiry_minutes': 'defaultExpiryMinutes',
        'webhook_version': 'webhookVersion',
        'wallet': 'wallet',
        'email_recipients': 'emailRecipients'
    }

    def __init__(self, id=None, merchant_id=None, display_name=None, secret=None, webhook_url=None, auto_convert_invalid_payments=True, default_expiry_minutes=None, webhook_version=None, wallet=None, email_recipients=None):  # noqa: E501
        """Merchant - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._merchant_id = None
        self._display_name = None
        self._secret = None
        self._webhook_url = None
        self._auto_convert_invalid_payments = None
        self._default_expiry_minutes = None
        self._webhook_version = None
        self._wallet = None
        self._email_recipients = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if display_name is not None:
            self.display_name = display_name
        if secret is not None:
            self.secret = secret
        if webhook_url is not None:
            self.webhook_url = webhook_url
        if auto_convert_invalid_payments is not None:
            self.auto_convert_invalid_payments = auto_convert_invalid_payments
        if default_expiry_minutes is not None:
            self.default_expiry_minutes = default_expiry_minutes
        if webhook_version is not None:
            self.webhook_version = webhook_version
        if wallet is not None:
            self.wallet = wallet
        if email_recipients is not None:
            self.email_recipients = email_recipients

    @property
    def id(self):
        """Gets the id of this Merchant.  # noqa: E501


        :return: The id of this Merchant.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Merchant.


        :param id: The id of this Merchant.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this Merchant.  # noqa: E501


        :return: The merchant_id of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this Merchant.


        :param merchant_id: The merchant_id of this Merchant.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def display_name(self):
        """Gets the display_name of this Merchant.  # noqa: E501


        :return: The display_name of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Merchant.


        :param display_name: The display_name of this Merchant.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def secret(self):
        """Gets the secret of this Merchant.  # noqa: E501


        :return: The secret of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Merchant.


        :param secret: The secret of this Merchant.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def webhook_url(self):
        """Gets the webhook_url of this Merchant.  # noqa: E501


        :return: The webhook_url of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this Merchant.


        :param webhook_url: The webhook_url of this Merchant.  # noqa: E501
        :type: str
        """

        self._webhook_url = webhook_url

    @property
    def auto_convert_invalid_payments(self):
        """Gets the auto_convert_invalid_payments of this Merchant.  # noqa: E501


        :return: The auto_convert_invalid_payments of this Merchant.  # noqa: E501
        :rtype: bool
        """
        return self._auto_convert_invalid_payments

    @auto_convert_invalid_payments.setter
    def auto_convert_invalid_payments(self, auto_convert_invalid_payments):
        """Sets the auto_convert_invalid_payments of this Merchant.


        :param auto_convert_invalid_payments: The auto_convert_invalid_payments of this Merchant.  # noqa: E501
        :type: bool
        """

        self._auto_convert_invalid_payments = auto_convert_invalid_payments

    @property
    def default_expiry_minutes(self):
        """Gets the default_expiry_minutes of this Merchant.  # noqa: E501


        :return: The default_expiry_minutes of this Merchant.  # noqa: E501
        :rtype: int
        """
        return self._default_expiry_minutes

    @default_expiry_minutes.setter
    def default_expiry_minutes(self, default_expiry_minutes):
        """Sets the default_expiry_minutes of this Merchant.


        :param default_expiry_minutes: The default_expiry_minutes of this Merchant.  # noqa: E501
        :type: int
        """

        self._default_expiry_minutes = default_expiry_minutes

    @property
    def webhook_version(self):
        """Gets the webhook_version of this Merchant.  # noqa: E501


        :return: The webhook_version of this Merchant.  # noqa: E501
        :rtype: int
        """
        return self._webhook_version

    @webhook_version.setter
    def webhook_version(self, webhook_version):
        """Sets the webhook_version of this Merchant.


        :param webhook_version: The webhook_version of this Merchant.  # noqa: E501
        :type: int
        """

        self._webhook_version = webhook_version

    @property
    def wallet(self):
        """Gets the wallet of this Merchant.  # noqa: E501


        :return: The wallet of this Merchant.  # noqa: E501
        :rtype: Wallet
        """
        return self._wallet

    @wallet.setter
    def wallet(self, wallet):
        """Sets the wallet of this Merchant.


        :param wallet: The wallet of this Merchant.  # noqa: E501
        :type: Wallet
        """

        self._wallet = wallet

    @property
    def email_recipients(self):
        """Gets the email_recipients of this Merchant.  # noqa: E501


        :return: The email_recipients of this Merchant.  # noqa: E501
        :rtype: str
        """
        return self._email_recipients

    @email_recipients.setter
    def email_recipients(self, email_recipients):
        """Sets the email_recipients of this Merchant.


        :param email_recipients: The email_recipients of this Merchant.  # noqa: E501
        :type: str
        """

        self._email_recipients = email_recipients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Merchant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Merchant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
