# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PayInInstruction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'form': 'Form',
        'redirect_url': 'str',
        'display_parameters': 'object'
    }

    attribute_map = {
        'action': 'action',
        'form': 'form',
        'redirect_url': 'redirectUrl',
        'display_parameters': 'displayParameters'
    }

    def __init__(self, action=None, form=None, redirect_url=None, display_parameters=None):  # noqa: E501
        """PayInInstruction - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._form = None
        self._redirect_url = None
        self._display_parameters = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if form is not None:
            self.form = form
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if display_parameters is not None:
            self.display_parameters = display_parameters

    @property
    def action(self):
        """Gets the action of this PayInInstruction.  # noqa: E501


        :return: The action of this PayInInstruction.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PayInInstruction.


        :param action: The action of this PayInInstruction.  # noqa: E501
        :type: str
        """
        allowed_values = ["REDIRECT", "FORM", "DISPLAY", "NONE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def form(self):
        """Gets the form of this PayInInstruction.  # noqa: E501


        :return: The form of this PayInInstruction.  # noqa: E501
        :rtype: Form
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this PayInInstruction.


        :param form: The form of this PayInInstruction.  # noqa: E501
        :type: Form
        """

        self._form = form

    @property
    def redirect_url(self):
        """Gets the redirect_url of this PayInInstruction.  # noqa: E501


        :return: The redirect_url of this PayInInstruction.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this PayInInstruction.


        :param redirect_url: The redirect_url of this PayInInstruction.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def display_parameters(self):
        """Gets the display_parameters of this PayInInstruction.  # noqa: E501


        :return: The display_parameters of this PayInInstruction.  # noqa: E501
        :rtype: object
        """
        return self._display_parameters

    @display_parameters.setter
    def display_parameters(self, display_parameters):
        """Sets the display_parameters of this PayInInstruction.


        :param display_parameters: The display_parameters of this PayInInstruction.  # noqa: E501
        :type: object
        """

        self._display_parameters = display_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayInInstruction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayInInstruction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
