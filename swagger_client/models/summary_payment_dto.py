# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SummaryPaymentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'merchant_display_name': 'str',
        'merchant_id': 'str',
        'date_created': 'int',
        'expiry_date': 'int',
        'quote_expiry_date': 'int',
        'acceptance_expiry_date': 'int',
        'quote_status': 'str',
        'reference': 'str',
        'type': 'DirectionDto',
        'sub_type': 'str',
        'status': 'PaymentStatusDto',
        'display_currency': 'PayAmountsDto',
        'wallet_currency': 'PayAmountsDto',
        'paid_currency': 'PayAmountsDto',
        'fee_currency': 'PayAmountsDto',
        'display_rate': 'ExchangeRateDto',
        'exchange_rate': 'ExchangeRateDto',
        'address': 'CryptoAddressDto',
        'return_url': 'str',
        'redirect_url': 'str',
        'transactions': 'list[GatewayTransactionDto]',
        'refund': 'object',
        'refunds': 'list[object]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'merchant_display_name': 'merchantDisplayName',
        'merchant_id': 'merchantId',
        'date_created': 'dateCreated',
        'expiry_date': 'expiryDate',
        'quote_expiry_date': 'quoteExpiryDate',
        'acceptance_expiry_date': 'acceptanceExpiryDate',
        'quote_status': 'quoteStatus',
        'reference': 'reference',
        'type': 'type',
        'sub_type': 'subType',
        'status': 'status',
        'display_currency': 'displayCurrency',
        'wallet_currency': 'walletCurrency',
        'paid_currency': 'paidCurrency',
        'fee_currency': 'feeCurrency',
        'display_rate': 'displayRate',
        'exchange_rate': 'exchangeRate',
        'address': 'address',
        'return_url': 'returnUrl',
        'redirect_url': 'redirectUrl',
        'transactions': 'transactions',
        'refund': 'refund',
        'refunds': 'refunds'
    }

    def __init__(self, uuid=None, merchant_display_name=None, merchant_id=None, date_created=None, expiry_date=None, quote_expiry_date=None, acceptance_expiry_date=None, quote_status=None, reference=None, type=None, sub_type='merchantPayIn', status=None, display_currency=None, wallet_currency=None, paid_currency=None, fee_currency=None, display_rate=None, exchange_rate=None, address=None, return_url=None, redirect_url=None, transactions=None, refund=None, refunds=None):  # noqa: E501
        """SummaryPaymentDto - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._merchant_display_name = None
        self._merchant_id = None
        self._date_created = None
        self._expiry_date = None
        self._quote_expiry_date = None
        self._acceptance_expiry_date = None
        self._quote_status = None
        self._reference = None
        self._type = None
        self._sub_type = None
        self._status = None
        self._display_currency = None
        self._wallet_currency = None
        self._paid_currency = None
        self._fee_currency = None
        self._display_rate = None
        self._exchange_rate = None
        self._address = None
        self._return_url = None
        self._redirect_url = None
        self._transactions = None
        self._refund = None
        self._refunds = None
        self.discriminator = None
        if uuid is not None:
            self.uuid = uuid
        if merchant_display_name is not None:
            self.merchant_display_name = merchant_display_name
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if date_created is not None:
            self.date_created = date_created
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if quote_expiry_date is not None:
            self.quote_expiry_date = quote_expiry_date
        if acceptance_expiry_date is not None:
            self.acceptance_expiry_date = acceptance_expiry_date
        if quote_status is not None:
            self.quote_status = quote_status
        if reference is not None:
            self.reference = reference
        if type is not None:
            self.type = type
        if sub_type is not None:
            self.sub_type = sub_type
        if status is not None:
            self.status = status
        if display_currency is not None:
            self.display_currency = display_currency
        if wallet_currency is not None:
            self.wallet_currency = wallet_currency
        if paid_currency is not None:
            self.paid_currency = paid_currency
        if fee_currency is not None:
            self.fee_currency = fee_currency
        if display_rate is not None:
            self.display_rate = display_rate
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if address is not None:
            self.address = address
        if return_url is not None:
            self.return_url = return_url
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if transactions is not None:
            self.transactions = transactions
        if refund is not None:
            self.refund = refund
        if refunds is not None:
            self.refunds = refunds

    @property
    def uuid(self):
        """Gets the uuid of this SummaryPaymentDto.  # noqa: E501

        unique identifier for the merchant payment  # noqa: E501

        :return: The uuid of this SummaryPaymentDto.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SummaryPaymentDto.

        unique identifier for the merchant payment  # noqa: E501

        :param uuid: The uuid of this SummaryPaymentDto.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def merchant_display_name(self):
        """Gets the merchant_display_name of this SummaryPaymentDto.  # noqa: E501

        display name for the merchant payment  # noqa: E501

        :return: The merchant_display_name of this SummaryPaymentDto.  # noqa: E501
        :rtype: str
        """
        return self._merchant_display_name

    @merchant_display_name.setter
    def merchant_display_name(self, merchant_display_name):
        """Sets the merchant_display_name of this SummaryPaymentDto.

        display name for the merchant payment  # noqa: E501

        :param merchant_display_name: The merchant_display_name of this SummaryPaymentDto.  # noqa: E501
        :type: str
        """

        self._merchant_display_name = merchant_display_name

    @property
    def merchant_id(self):
        """Gets the merchant_id of this SummaryPaymentDto.  # noqa: E501

        Your Merchant ID. You can find it on the Merchant Details page in your account  # noqa: E501

        :return: The merchant_id of this SummaryPaymentDto.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this SummaryPaymentDto.

        Your Merchant ID. You can find it on the Merchant Details page in your account  # noqa: E501

        :param merchant_id: The merchant_id of this SummaryPaymentDto.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def date_created(self):
        """Gets the date_created of this SummaryPaymentDto.  # noqa: E501

        Currently this is a long - can it be changed? Date and times are encoded into UNIX epoch timestamps  # noqa: E501

        :return: The date_created of this SummaryPaymentDto.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SummaryPaymentDto.

        Currently this is a long - can it be changed? Date and times are encoded into UNIX epoch timestamps  # noqa: E501

        :param date_created: The date_created of this SummaryPaymentDto.  # noqa: E501
        :type: int
        """

        self._date_created = date_created

    @property
    def expiry_date(self):
        """Gets the expiry_date of this SummaryPaymentDto.  # noqa: E501

        Date and times are encoded into UNIX epoch timestamps  # noqa: E501

        :return: The expiry_date of this SummaryPaymentDto.  # noqa: E501
        :rtype: int
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this SummaryPaymentDto.

        Date and times are encoded into UNIX epoch timestamps  # noqa: E501

        :param expiry_date: The expiry_date of this SummaryPaymentDto.  # noqa: E501
        :type: int
        """

        self._expiry_date = expiry_date

    @property
    def quote_expiry_date(self):
        """Gets the quote_expiry_date of this SummaryPaymentDto.  # noqa: E501

        Date and times are encoded into UNIX epoch timestamps  # noqa: E501

        :return: The quote_expiry_date of this SummaryPaymentDto.  # noqa: E501
        :rtype: int
        """
        return self._quote_expiry_date

    @quote_expiry_date.setter
    def quote_expiry_date(self, quote_expiry_date):
        """Sets the quote_expiry_date of this SummaryPaymentDto.

        Date and times are encoded into UNIX epoch timestamps  # noqa: E501

        :param quote_expiry_date: The quote_expiry_date of this SummaryPaymentDto.  # noqa: E501
        :type: int
        """

        self._quote_expiry_date = quote_expiry_date

    @property
    def acceptance_expiry_date(self):
        """Gets the acceptance_expiry_date of this SummaryPaymentDto.  # noqa: E501

        Date and times are encoded into UNIX epoch timestamps  # noqa: E501

        :return: The acceptance_expiry_date of this SummaryPaymentDto.  # noqa: E501
        :rtype: int
        """
        return self._acceptance_expiry_date

    @acceptance_expiry_date.setter
    def acceptance_expiry_date(self, acceptance_expiry_date):
        """Sets the acceptance_expiry_date of this SummaryPaymentDto.

        Date and times are encoded into UNIX epoch timestamps  # noqa: E501

        :param acceptance_expiry_date: The acceptance_expiry_date of this SummaryPaymentDto.  # noqa: E501
        :type: int
        """

        self._acceptance_expiry_date = acceptance_expiry_date

    @property
    def quote_status(self):
        """Gets the quote_status of this SummaryPaymentDto.  # noqa: E501


        :return: The quote_status of this SummaryPaymentDto.  # noqa: E501
        :rtype: str
        """
        return self._quote_status

    @quote_status.setter
    def quote_status(self, quote_status):
        """Sets the quote_status of this SummaryPaymentDto.


        :param quote_status: The quote_status of this SummaryPaymentDto.  # noqa: E501
        :type: str
        """

        self._quote_status = quote_status

    @property
    def reference(self):
        """Gets the reference of this SummaryPaymentDto.  # noqa: E501

        Your payment reference ID. Feel free to submit any ID to tie the payment to your customer  # noqa: E501

        :return: The reference of this SummaryPaymentDto.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SummaryPaymentDto.

        Your payment reference ID. Feel free to submit any ID to tie the payment to your customer  # noqa: E501

        :param reference: The reference of this SummaryPaymentDto.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def type(self):
        """Gets the type of this SummaryPaymentDto.  # noqa: E501


        :return: The type of this SummaryPaymentDto.  # noqa: E501
        :rtype: DirectionDto
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SummaryPaymentDto.


        :param type: The type of this SummaryPaymentDto.  # noqa: E501
        :type: DirectionDto
        """

        self._type = type

    @property
    def sub_type(self):
        """Gets the sub_type of this SummaryPaymentDto.  # noqa: E501

        Payment sub type  # noqa: E501

        :return: The sub_type of this SummaryPaymentDto.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this SummaryPaymentDto.

        Payment sub type  # noqa: E501

        :param sub_type: The sub_type of this SummaryPaymentDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["merchantPayIn", "merchantPayOut", "merchantRefund"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def status(self):
        """Gets the status of this SummaryPaymentDto.  # noqa: E501


        :return: The status of this SummaryPaymentDto.  # noqa: E501
        :rtype: PaymentStatusDto
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SummaryPaymentDto.


        :param status: The status of this SummaryPaymentDto.  # noqa: E501
        :type: PaymentStatusDto
        """

        self._status = status

    @property
    def display_currency(self):
        """Gets the display_currency of this SummaryPaymentDto.  # noqa: E501


        :return: The display_currency of this SummaryPaymentDto.  # noqa: E501
        :rtype: PayAmountsDto
        """
        return self._display_currency

    @display_currency.setter
    def display_currency(self, display_currency):
        """Sets the display_currency of this SummaryPaymentDto.


        :param display_currency: The display_currency of this SummaryPaymentDto.  # noqa: E501
        :type: PayAmountsDto
        """

        self._display_currency = display_currency

    @property
    def wallet_currency(self):
        """Gets the wallet_currency of this SummaryPaymentDto.  # noqa: E501


        :return: The wallet_currency of this SummaryPaymentDto.  # noqa: E501
        :rtype: PayAmountsDto
        """
        return self._wallet_currency

    @wallet_currency.setter
    def wallet_currency(self, wallet_currency):
        """Sets the wallet_currency of this SummaryPaymentDto.


        :param wallet_currency: The wallet_currency of this SummaryPaymentDto.  # noqa: E501
        :type: PayAmountsDto
        """

        self._wallet_currency = wallet_currency

    @property
    def paid_currency(self):
        """Gets the paid_currency of this SummaryPaymentDto.  # noqa: E501


        :return: The paid_currency of this SummaryPaymentDto.  # noqa: E501
        :rtype: PayAmountsDto
        """
        return self._paid_currency

    @paid_currency.setter
    def paid_currency(self, paid_currency):
        """Sets the paid_currency of this SummaryPaymentDto.


        :param paid_currency: The paid_currency of this SummaryPaymentDto.  # noqa: E501
        :type: PayAmountsDto
        """

        self._paid_currency = paid_currency

    @property
    def fee_currency(self):
        """Gets the fee_currency of this SummaryPaymentDto.  # noqa: E501


        :return: The fee_currency of this SummaryPaymentDto.  # noqa: E501
        :rtype: PayAmountsDto
        """
        return self._fee_currency

    @fee_currency.setter
    def fee_currency(self, fee_currency):
        """Sets the fee_currency of this SummaryPaymentDto.


        :param fee_currency: The fee_currency of this SummaryPaymentDto.  # noqa: E501
        :type: PayAmountsDto
        """

        self._fee_currency = fee_currency

    @property
    def display_rate(self):
        """Gets the display_rate of this SummaryPaymentDto.  # noqa: E501


        :return: The display_rate of this SummaryPaymentDto.  # noqa: E501
        :rtype: ExchangeRateDto
        """
        return self._display_rate

    @display_rate.setter
    def display_rate(self, display_rate):
        """Sets the display_rate of this SummaryPaymentDto.


        :param display_rate: The display_rate of this SummaryPaymentDto.  # noqa: E501
        :type: ExchangeRateDto
        """

        self._display_rate = display_rate

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this SummaryPaymentDto.  # noqa: E501


        :return: The exchange_rate of this SummaryPaymentDto.  # noqa: E501
        :rtype: ExchangeRateDto
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this SummaryPaymentDto.


        :param exchange_rate: The exchange_rate of this SummaryPaymentDto.  # noqa: E501
        :type: ExchangeRateDto
        """

        self._exchange_rate = exchange_rate

    @property
    def address(self):
        """Gets the address of this SummaryPaymentDto.  # noqa: E501


        :return: The address of this SummaryPaymentDto.  # noqa: E501
        :rtype: CryptoAddressDto
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SummaryPaymentDto.


        :param address: The address of this SummaryPaymentDto.  # noqa: E501
        :type: CryptoAddressDto
        """

        self._address = address

    @property
    def return_url(self):
        """Gets the return_url of this SummaryPaymentDto.  # noqa: E501

        URL that the customer will be redirected to if they click a \"Back to Merchant\" button on the payment web page  # noqa: E501

        :return: The return_url of this SummaryPaymentDto.  # noqa: E501
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this SummaryPaymentDto.

        URL that the customer will be redirected to if they click a \"Back to Merchant\" button on the payment web page  # noqa: E501

        :param return_url: The return_url of this SummaryPaymentDto.  # noqa: E501
        :type: str
        """

        self._return_url = return_url

    @property
    def redirect_url(self):
        """Gets the redirect_url of this SummaryPaymentDto.  # noqa: E501

        URL to the payment page that you can redirect your customers to  # noqa: E501

        :return: The redirect_url of this SummaryPaymentDto.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this SummaryPaymentDto.

        URL to the payment page that you can redirect your customers to  # noqa: E501

        :param redirect_url: The redirect_url of this SummaryPaymentDto.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def transactions(self):
        """Gets the transactions of this SummaryPaymentDto.  # noqa: E501


        :return: The transactions of this SummaryPaymentDto.  # noqa: E501
        :rtype: list[GatewayTransactionDto]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this SummaryPaymentDto.


        :param transactions: The transactions of this SummaryPaymentDto.  # noqa: E501
        :type: list[GatewayTransactionDto]
        """

        self._transactions = transactions

    @property
    def refund(self):
        """Gets the refund of this SummaryPaymentDto.  # noqa: E501

        The payment this object is a refund of. This should reference the pay in that this refund was created for  # noqa: E501

        :return: The refund of this SummaryPaymentDto.  # noqa: E501
        :rtype: object
        """
        return self._refund

    @refund.setter
    def refund(self, refund):
        """Sets the refund of this SummaryPaymentDto.

        The payment this object is a refund of. This should reference the pay in that this refund was created for  # noqa: E501

        :param refund: The refund of this SummaryPaymentDto.  # noqa: E501
        :type: object
        """

        self._refund = refund

    @property
    def refunds(self):
        """Gets the refunds of this SummaryPaymentDto.  # noqa: E501

        Refunds that have been requested for this payment. This should reference the refund payout for this pay in  # noqa: E501

        :return: The refunds of this SummaryPaymentDto.  # noqa: E501
        :rtype: list[object]
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this SummaryPaymentDto.

        Refunds that have been requested for this payment. This should reference the refund payout for this pay in  # noqa: E501

        :param refunds: The refunds of this SummaryPaymentDto.  # noqa: E501
        :type: list[object]
        """

        self._refunds = refunds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SummaryPaymentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummaryPaymentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
