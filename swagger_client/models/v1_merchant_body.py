# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1MerchantBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'webhook_url': 'str',
        'wallet': 'Apiv1merchantWallet'
    }

    attribute_map = {
        'display_name': 'displayName',
        'webhook_url': 'webhookUrl',
        'wallet': 'wallet'
    }

    def __init__(self, display_name='Test Merchant Name', webhook_url='https://www.URL.com/to/send/webhooks/to', wallet=None):  # noqa: E501
        """V1MerchantBody - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._webhook_url = None
        self._wallet = None
        self.discriminator = None
        self.display_name = display_name
        if webhook_url is not None:
            self.webhook_url = webhook_url
        self.wallet = wallet

    @property
    def display_name(self):
        """Gets the display_name of this V1MerchantBody.  # noqa: E501

        The name of the merchant that will be displayed on the payments page  # noqa: E501

        :return: The display_name of this V1MerchantBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V1MerchantBody.

        The name of the merchant that will be displayed on the payments page  # noqa: E501

        :param display_name: The display_name of this V1MerchantBody.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def webhook_url(self):
        """Gets the webhook_url of this V1MerchantBody.  # noqa: E501

        The URL that will recieve the webhooks  # noqa: E501

        :return: The webhook_url of this V1MerchantBody.  # noqa: E501
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this V1MerchantBody.

        The URL that will recieve the webhooks  # noqa: E501

        :param webhook_url: The webhook_url of this V1MerchantBody.  # noqa: E501
        :type: str
        """

        self._webhook_url = webhook_url

    @property
    def wallet(self):
        """Gets the wallet of this V1MerchantBody.  # noqa: E501


        :return: The wallet of this V1MerchantBody.  # noqa: E501
        :rtype: Apiv1merchantWallet
        """
        return self._wallet

    @wallet.setter
    def wallet(self, wallet):
        """Sets the wallet of this V1MerchantBody.


        :param wallet: The wallet of this V1MerchantBody.  # noqa: E501
        :type: Apiv1merchantWallet
        """
        if wallet is None:
            raise ValueError("Invalid value for `wallet`, must not be `None`")  # noqa: E501

        self._wallet = wallet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1MerchantBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1MerchantBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
