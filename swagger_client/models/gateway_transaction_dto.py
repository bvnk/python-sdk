# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GatewayTransactionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_created': 'int',
        'date_confirmed': 'int',
        'hash': 'str',
        'amount': 'float',
        'risk': 'object',
        'network_fee_currency': 'str',
        'network_fee_amount': 'float',
        'sources': 'list[str]',
        'display_rate': 'ExchangeRateDto',
        'exchange_rate': 'ExchangeRateDto'
    }

    attribute_map = {
        'date_created': 'dateCreated',
        'date_confirmed': 'dateConfirmed',
        'hash': 'hash',
        'amount': 'amount',
        'risk': 'risk',
        'network_fee_currency': 'networkFeeCurrency',
        'network_fee_amount': 'networkFeeAmount',
        'sources': 'sources',
        'display_rate': 'displayRate',
        'exchange_rate': 'exchangeRate'
    }

    def __init__(self, date_created=None, date_confirmed=None, hash=None, amount=None, risk=None, network_fee_currency=None, network_fee_amount=None, sources=None, display_rate=None, exchange_rate=None):  # noqa: E501
        """GatewayTransactionDto - a model defined in Swagger"""  # noqa: E501
        self._date_created = None
        self._date_confirmed = None
        self._hash = None
        self._amount = None
        self._risk = None
        self._network_fee_currency = None
        self._network_fee_amount = None
        self._sources = None
        self._display_rate = None
        self._exchange_rate = None
        self.discriminator = None
        if date_created is not None:
            self.date_created = date_created
        if date_confirmed is not None:
            self.date_confirmed = date_confirmed
        if hash is not None:
            self.hash = hash
        if amount is not None:
            self.amount = amount
        if risk is not None:
            self.risk = risk
        if network_fee_currency is not None:
            self.network_fee_currency = network_fee_currency
        if network_fee_amount is not None:
            self.network_fee_amount = network_fee_amount
        if sources is not None:
            self.sources = sources
        if display_rate is not None:
            self.display_rate = display_rate
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate

    @property
    def date_created(self):
        """Gets the date_created of this GatewayTransactionDto.  # noqa: E501


        :return: The date_created of this GatewayTransactionDto.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this GatewayTransactionDto.


        :param date_created: The date_created of this GatewayTransactionDto.  # noqa: E501
        :type: int
        """

        self._date_created = date_created

    @property
    def date_confirmed(self):
        """Gets the date_confirmed of this GatewayTransactionDto.  # noqa: E501


        :return: The date_confirmed of this GatewayTransactionDto.  # noqa: E501
        :rtype: int
        """
        return self._date_confirmed

    @date_confirmed.setter
    def date_confirmed(self, date_confirmed):
        """Sets the date_confirmed of this GatewayTransactionDto.


        :param date_confirmed: The date_confirmed of this GatewayTransactionDto.  # noqa: E501
        :type: int
        """

        self._date_confirmed = date_confirmed

    @property
    def hash(self):
        """Gets the hash of this GatewayTransactionDto.  # noqa: E501

        Transaction hash  # noqa: E501

        :return: The hash of this GatewayTransactionDto.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this GatewayTransactionDto.

        Transaction hash  # noqa: E501

        :param hash: The hash of this GatewayTransactionDto.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def amount(self):
        """Gets the amount of this GatewayTransactionDto.  # noqa: E501

        payment amount  # noqa: E501

        :return: The amount of this GatewayTransactionDto.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GatewayTransactionDto.

        payment amount  # noqa: E501

        :param amount: The amount of this GatewayTransactionDto.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def risk(self):
        """Gets the risk of this GatewayTransactionDto.  # noqa: E501


        :return: The risk of this GatewayTransactionDto.  # noqa: E501
        :rtype: object
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this GatewayTransactionDto.


        :param risk: The risk of this GatewayTransactionDto.  # noqa: E501
        :type: object
        """

        self._risk = risk

    @property
    def network_fee_currency(self):
        """Gets the network_fee_currency of this GatewayTransactionDto.  # noqa: E501

        currency acronym  # noqa: E501

        :return: The network_fee_currency of this GatewayTransactionDto.  # noqa: E501
        :rtype: str
        """
        return self._network_fee_currency

    @network_fee_currency.setter
    def network_fee_currency(self, network_fee_currency):
        """Sets the network_fee_currency of this GatewayTransactionDto.

        currency acronym  # noqa: E501

        :param network_fee_currency: The network_fee_currency of this GatewayTransactionDto.  # noqa: E501
        :type: str
        """

        self._network_fee_currency = network_fee_currency

    @property
    def network_fee_amount(self):
        """Gets the network_fee_amount of this GatewayTransactionDto.  # noqa: E501

        payment amount  # noqa: E501

        :return: The network_fee_amount of this GatewayTransactionDto.  # noqa: E501
        :rtype: float
        """
        return self._network_fee_amount

    @network_fee_amount.setter
    def network_fee_amount(self, network_fee_amount):
        """Sets the network_fee_amount of this GatewayTransactionDto.

        payment amount  # noqa: E501

        :param network_fee_amount: The network_fee_amount of this GatewayTransactionDto.  # noqa: E501
        :type: float
        """

        self._network_fee_amount = network_fee_amount

    @property
    def sources(self):
        """Gets the sources of this GatewayTransactionDto.  # noqa: E501

        list of source addresses (only applicable if payment in)  # noqa: E501

        :return: The sources of this GatewayTransactionDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this GatewayTransactionDto.

        list of source addresses (only applicable if payment in)  # noqa: E501

        :param sources: The sources of this GatewayTransactionDto.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    @property
    def display_rate(self):
        """Gets the display_rate of this GatewayTransactionDto.  # noqa: E501


        :return: The display_rate of this GatewayTransactionDto.  # noqa: E501
        :rtype: ExchangeRateDto
        """
        return self._display_rate

    @display_rate.setter
    def display_rate(self, display_rate):
        """Sets the display_rate of this GatewayTransactionDto.


        :param display_rate: The display_rate of this GatewayTransactionDto.  # noqa: E501
        :type: ExchangeRateDto
        """

        self._display_rate = display_rate

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this GatewayTransactionDto.  # noqa: E501


        :return: The exchange_rate of this GatewayTransactionDto.  # noqa: E501
        :rtype: ExchangeRateDto
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this GatewayTransactionDto.


        :param exchange_rate: The exchange_rate of this GatewayTransactionDto.  # noqa: E501
        :type: ExchangeRateDto
        """

        self._exchange_rate = exchange_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GatewayTransactionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GatewayTransactionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
