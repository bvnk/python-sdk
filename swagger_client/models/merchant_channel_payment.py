# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantChannelPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_id': 'str',
        'merchant_id': 'str',
        'merchant_display_name': 'str',
        'reference': 'str',
        'date_created': 'int',
        'last_updated': 'int',
        'status': 'str',
        'uuid': 'str',
        'hash': 'str',
        'address': 'str',
        'tag': 'str',
        'paid_currency': 'str',
        'display_currency': 'str',
        'wallet_currency': 'str',
        'fee_currency': 'str',
        'paid_amount': 'float',
        'display_amount': 'float',
        'wallet_amount': 'float',
        'fee_amount': 'float',
        'exchange_rate': 'ExchangeRateDto',
        'display_rate': 'ExchangeRateDto',
        'risk': 'ExchangeRateDto',
        'sources': 'list[str]',
        'network_fee': 'NetworkFee'
    }

    attribute_map = {
        'channel_id': 'channelId',
        'merchant_id': 'merchantId',
        'merchant_display_name': 'merchantDisplayName',
        'reference': 'reference',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'status': 'status',
        'uuid': 'uuid',
        'hash': 'hash',
        'address': 'address',
        'tag': 'tag',
        'paid_currency': 'paidCurrency',
        'display_currency': 'displayCurrency',
        'wallet_currency': 'walletCurrency',
        'fee_currency': 'feeCurrency',
        'paid_amount': 'paidAmount',
        'display_amount': 'displayAmount',
        'wallet_amount': 'walletAmount',
        'fee_amount': 'feeAmount',
        'exchange_rate': 'exchangeRate',
        'display_rate': 'displayRate',
        'risk': 'risk',
        'sources': 'sources',
        'network_fee': 'networkFee'
    }

    def __init__(self, channel_id=None, merchant_id=None, merchant_display_name=None, reference=None, date_created=0, last_updated=0, status=None, uuid=None, hash=None, address=None, tag=None, paid_currency=None, display_currency=None, wallet_currency=None, fee_currency=None, paid_amount=0, display_amount=0, wallet_amount=0, fee_amount=0, exchange_rate=None, display_rate=None, risk=None, sources=None, network_fee=None):  # noqa: E501
        """MerchantChannelPayment - a model defined in Swagger"""  # noqa: E501
        self._channel_id = None
        self._merchant_id = None
        self._merchant_display_name = None
        self._reference = None
        self._date_created = None
        self._last_updated = None
        self._status = None
        self._uuid = None
        self._hash = None
        self._address = None
        self._tag = None
        self._paid_currency = None
        self._display_currency = None
        self._wallet_currency = None
        self._fee_currency = None
        self._paid_amount = None
        self._display_amount = None
        self._wallet_amount = None
        self._fee_amount = None
        self._exchange_rate = None
        self._display_rate = None
        self._risk = None
        self._sources = None
        self._network_fee = None
        self.discriminator = None
        if channel_id is not None:
            self.channel_id = channel_id
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if merchant_display_name is not None:
            self.merchant_display_name = merchant_display_name
        if reference is not None:
            self.reference = reference
        if date_created is not None:
            self.date_created = date_created
        if last_updated is not None:
            self.last_updated = last_updated
        if status is not None:
            self.status = status
        if uuid is not None:
            self.uuid = uuid
        if hash is not None:
            self.hash = hash
        if address is not None:
            self.address = address
        if tag is not None:
            self.tag = tag
        if paid_currency is not None:
            self.paid_currency = paid_currency
        if display_currency is not None:
            self.display_currency = display_currency
        if wallet_currency is not None:
            self.wallet_currency = wallet_currency
        if fee_currency is not None:
            self.fee_currency = fee_currency
        if paid_amount is not None:
            self.paid_amount = paid_amount
        if display_amount is not None:
            self.display_amount = display_amount
        if wallet_amount is not None:
            self.wallet_amount = wallet_amount
        if fee_amount is not None:
            self.fee_amount = fee_amount
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if display_rate is not None:
            self.display_rate = display_rate
        if risk is not None:
            self.risk = risk
        if sources is not None:
            self.sources = sources
        if network_fee is not None:
            self.network_fee = network_fee

    @property
    def channel_id(self):
        """Gets the channel_id of this MerchantChannelPayment.  # noqa: E501


        :return: The channel_id of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this MerchantChannelPayment.


        :param channel_id: The channel_id of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """

        self._channel_id = channel_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this MerchantChannelPayment.  # noqa: E501


        :return: The merchant_id of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this MerchantChannelPayment.


        :param merchant_id: The merchant_id of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def merchant_display_name(self):
        """Gets the merchant_display_name of this MerchantChannelPayment.  # noqa: E501


        :return: The merchant_display_name of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._merchant_display_name

    @merchant_display_name.setter
    def merchant_display_name(self, merchant_display_name):
        """Sets the merchant_display_name of this MerchantChannelPayment.


        :param merchant_display_name: The merchant_display_name of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """

        self._merchant_display_name = merchant_display_name

    @property
    def reference(self):
        """Gets the reference of this MerchantChannelPayment.  # noqa: E501


        :return: The reference of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this MerchantChannelPayment.


        :param reference: The reference of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def date_created(self):
        """Gets the date_created of this MerchantChannelPayment.  # noqa: E501


        :return: The date_created of this MerchantChannelPayment.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MerchantChannelPayment.


        :param date_created: The date_created of this MerchantChannelPayment.  # noqa: E501
        :type: int
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this MerchantChannelPayment.  # noqa: E501


        :return: The last_updated of this MerchantChannelPayment.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this MerchantChannelPayment.


        :param last_updated: The last_updated of this MerchantChannelPayment.  # noqa: E501
        :type: int
        """

        self._last_updated = last_updated

    @property
    def status(self):
        """Gets the status of this MerchantChannelPayment.  # noqa: E501


        :return: The status of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MerchantChannelPayment.


        :param status: The status of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """
        allowed_values = ["DETECTED", "COMPLETE", "UNKNOWN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def uuid(self):
        """Gets the uuid of this MerchantChannelPayment.  # noqa: E501


        :return: The uuid of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this MerchantChannelPayment.


        :param uuid: The uuid of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def hash(self):
        """Gets the hash of this MerchantChannelPayment.  # noqa: E501


        :return: The hash of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this MerchantChannelPayment.


        :param hash: The hash of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def address(self):
        """Gets the address of this MerchantChannelPayment.  # noqa: E501


        :return: The address of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this MerchantChannelPayment.


        :param address: The address of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def tag(self):
        """Gets the tag of this MerchantChannelPayment.  # noqa: E501


        :return: The tag of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this MerchantChannelPayment.


        :param tag: The tag of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def paid_currency(self):
        """Gets the paid_currency of this MerchantChannelPayment.  # noqa: E501


        :return: The paid_currency of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._paid_currency

    @paid_currency.setter
    def paid_currency(self, paid_currency):
        """Sets the paid_currency of this MerchantChannelPayment.


        :param paid_currency: The paid_currency of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """

        self._paid_currency = paid_currency

    @property
    def display_currency(self):
        """Gets the display_currency of this MerchantChannelPayment.  # noqa: E501


        :return: The display_currency of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._display_currency

    @display_currency.setter
    def display_currency(self, display_currency):
        """Sets the display_currency of this MerchantChannelPayment.


        :param display_currency: The display_currency of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """

        self._display_currency = display_currency

    @property
    def wallet_currency(self):
        """Gets the wallet_currency of this MerchantChannelPayment.  # noqa: E501


        :return: The wallet_currency of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._wallet_currency

    @wallet_currency.setter
    def wallet_currency(self, wallet_currency):
        """Sets the wallet_currency of this MerchantChannelPayment.


        :param wallet_currency: The wallet_currency of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """

        self._wallet_currency = wallet_currency

    @property
    def fee_currency(self):
        """Gets the fee_currency of this MerchantChannelPayment.  # noqa: E501


        :return: The fee_currency of this MerchantChannelPayment.  # noqa: E501
        :rtype: str
        """
        return self._fee_currency

    @fee_currency.setter
    def fee_currency(self, fee_currency):
        """Sets the fee_currency of this MerchantChannelPayment.


        :param fee_currency: The fee_currency of this MerchantChannelPayment.  # noqa: E501
        :type: str
        """

        self._fee_currency = fee_currency

    @property
    def paid_amount(self):
        """Gets the paid_amount of this MerchantChannelPayment.  # noqa: E501


        :return: The paid_amount of this MerchantChannelPayment.  # noqa: E501
        :rtype: float
        """
        return self._paid_amount

    @paid_amount.setter
    def paid_amount(self, paid_amount):
        """Sets the paid_amount of this MerchantChannelPayment.


        :param paid_amount: The paid_amount of this MerchantChannelPayment.  # noqa: E501
        :type: float
        """

        self._paid_amount = paid_amount

    @property
    def display_amount(self):
        """Gets the display_amount of this MerchantChannelPayment.  # noqa: E501


        :return: The display_amount of this MerchantChannelPayment.  # noqa: E501
        :rtype: float
        """
        return self._display_amount

    @display_amount.setter
    def display_amount(self, display_amount):
        """Sets the display_amount of this MerchantChannelPayment.


        :param display_amount: The display_amount of this MerchantChannelPayment.  # noqa: E501
        :type: float
        """

        self._display_amount = display_amount

    @property
    def wallet_amount(self):
        """Gets the wallet_amount of this MerchantChannelPayment.  # noqa: E501


        :return: The wallet_amount of this MerchantChannelPayment.  # noqa: E501
        :rtype: float
        """
        return self._wallet_amount

    @wallet_amount.setter
    def wallet_amount(self, wallet_amount):
        """Sets the wallet_amount of this MerchantChannelPayment.


        :param wallet_amount: The wallet_amount of this MerchantChannelPayment.  # noqa: E501
        :type: float
        """

        self._wallet_amount = wallet_amount

    @property
    def fee_amount(self):
        """Gets the fee_amount of this MerchantChannelPayment.  # noqa: E501


        :return: The fee_amount of this MerchantChannelPayment.  # noqa: E501
        :rtype: float
        """
        return self._fee_amount

    @fee_amount.setter
    def fee_amount(self, fee_amount):
        """Sets the fee_amount of this MerchantChannelPayment.


        :param fee_amount: The fee_amount of this MerchantChannelPayment.  # noqa: E501
        :type: float
        """

        self._fee_amount = fee_amount

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this MerchantChannelPayment.  # noqa: E501


        :return: The exchange_rate of this MerchantChannelPayment.  # noqa: E501
        :rtype: ExchangeRateDto
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this MerchantChannelPayment.


        :param exchange_rate: The exchange_rate of this MerchantChannelPayment.  # noqa: E501
        :type: ExchangeRateDto
        """

        self._exchange_rate = exchange_rate

    @property
    def display_rate(self):
        """Gets the display_rate of this MerchantChannelPayment.  # noqa: E501


        :return: The display_rate of this MerchantChannelPayment.  # noqa: E501
        :rtype: ExchangeRateDto
        """
        return self._display_rate

    @display_rate.setter
    def display_rate(self, display_rate):
        """Sets the display_rate of this MerchantChannelPayment.


        :param display_rate: The display_rate of this MerchantChannelPayment.  # noqa: E501
        :type: ExchangeRateDto
        """

        self._display_rate = display_rate

    @property
    def risk(self):
        """Gets the risk of this MerchantChannelPayment.  # noqa: E501


        :return: The risk of this MerchantChannelPayment.  # noqa: E501
        :rtype: ExchangeRateDto
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this MerchantChannelPayment.


        :param risk: The risk of this MerchantChannelPayment.  # noqa: E501
        :type: ExchangeRateDto
        """

        self._risk = risk

    @property
    def sources(self):
        """Gets the sources of this MerchantChannelPayment.  # noqa: E501


        :return: The sources of this MerchantChannelPayment.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this MerchantChannelPayment.


        :param sources: The sources of this MerchantChannelPayment.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    @property
    def network_fee(self):
        """Gets the network_fee of this MerchantChannelPayment.  # noqa: E501


        :return: The network_fee of this MerchantChannelPayment.  # noqa: E501
        :rtype: NetworkFee
        """
        return self._network_fee

    @network_fee.setter
    def network_fee(self, network_fee):
        """Sets the network_fee of this MerchantChannelPayment.


        :param network_fee: The network_fee of this MerchantChannelPayment.  # noqa: E501
        :type: NetworkFee
        """

        self._network_fee = network_fee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantChannelPayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantChannelPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
