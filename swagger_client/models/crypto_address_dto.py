# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CryptoAddressDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'tag': 'str',
        'protocol': 'str',
        'uri': 'str',
        'alternatives': 'list[AlternativeAddress]'
    }

    attribute_map = {
        'address': 'address',
        'tag': 'tag',
        'protocol': 'protocol',
        'uri': 'uri',
        'alternatives': 'alternatives'
    }

    def __init__(self, address=None, tag=None, protocol=None, uri=None, alternatives=None):  # noqa: E501
        """CryptoAddressDto - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._tag = None
        self._protocol = None
        self._uri = None
        self._alternatives = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if tag is not None:
            self.tag = tag
        if protocol is not None:
            self.protocol = protocol
        if uri is not None:
            self.uri = uri
        if alternatives is not None:
            self.alternatives = alternatives

    @property
    def address(self):
        """Gets the address of this CryptoAddressDto.  # noqa: E501

        Address to withdrawal funds to  # noqa: E501

        :return: The address of this CryptoAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CryptoAddressDto.

        Address to withdrawal funds to  # noqa: E501

        :param address: The address of this CryptoAddressDto.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def tag(self):
        """Gets the tag of this CryptoAddressDto.  # noqa: E501

        This is a payment destination tag. This fields isn't null when the paidCurrency.currency value is XRP  # noqa: E501

        :return: The tag of this CryptoAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this CryptoAddressDto.

        This is a payment destination tag. This fields isn't null when the paidCurrency.currency value is XRP  # noqa: E501

        :param tag: The tag of this CryptoAddressDto.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def protocol(self):
        """Gets the protocol of this CryptoAddressDto.  # noqa: E501

        protocol behind a currency (ERC20 or TRC20)  # noqa: E501

        :return: The protocol of this CryptoAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this CryptoAddressDto.

        protocol behind a currency (ERC20 or TRC20)  # noqa: E501

        :param protocol: The protocol of this CryptoAddressDto.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def uri(self):
        """Gets the uri of this CryptoAddressDto.  # noqa: E501

        The destination address URI for QR code  # noqa: E501

        :return: The uri of this CryptoAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CryptoAddressDto.

        The destination address URI for QR code  # noqa: E501

        :param uri: The uri of this CryptoAddressDto.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def alternatives(self):
        """Gets the alternatives of this CryptoAddressDto.  # noqa: E501

        List of non-default addresses for other tokens  # noqa: E501

        :return: The alternatives of this CryptoAddressDto.  # noqa: E501
        :rtype: list[AlternativeAddress]
        """
        return self._alternatives

    @alternatives.setter
    def alternatives(self, alternatives):
        """Sets the alternatives of this CryptoAddressDto.

        List of non-default addresses for other tokens  # noqa: E501

        :param alternatives: The alternatives of this CryptoAddressDto.  # noqa: E501
        :type: list[AlternativeAddress]
        """

        self._alternatives = alternatives

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CryptoAddressDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CryptoAddressDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
