# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetworkFee(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'paid_currency': 'str',
        'paid_amount': 'float',
        'display_currency': 'str',
        'display_amount': 'float'
    }

    attribute_map = {
        'paid_currency': 'paidCurrency',
        'paid_amount': 'paidAmount',
        'display_currency': 'displayCurrency',
        'display_amount': 'displayAmount'
    }

    def __init__(self, paid_currency=None, paid_amount=None, display_currency=None, display_amount=None):  # noqa: E501
        """NetworkFee - a model defined in Swagger"""  # noqa: E501
        self._paid_currency = None
        self._paid_amount = None
        self._display_currency = None
        self._display_amount = None
        self.discriminator = None
        if paid_currency is not None:
            self.paid_currency = paid_currency
        if paid_amount is not None:
            self.paid_amount = paid_amount
        if display_currency is not None:
            self.display_currency = display_currency
        if display_amount is not None:
            self.display_amount = display_amount

    @property
    def paid_currency(self):
        """Gets the paid_currency of this NetworkFee.  # noqa: E501


        :return: The paid_currency of this NetworkFee.  # noqa: E501
        :rtype: str
        """
        return self._paid_currency

    @paid_currency.setter
    def paid_currency(self, paid_currency):
        """Sets the paid_currency of this NetworkFee.


        :param paid_currency: The paid_currency of this NetworkFee.  # noqa: E501
        :type: str
        """

        self._paid_currency = paid_currency

    @property
    def paid_amount(self):
        """Gets the paid_amount of this NetworkFee.  # noqa: E501


        :return: The paid_amount of this NetworkFee.  # noqa: E501
        :rtype: float
        """
        return self._paid_amount

    @paid_amount.setter
    def paid_amount(self, paid_amount):
        """Sets the paid_amount of this NetworkFee.


        :param paid_amount: The paid_amount of this NetworkFee.  # noqa: E501
        :type: float
        """

        self._paid_amount = paid_amount

    @property
    def display_currency(self):
        """Gets the display_currency of this NetworkFee.  # noqa: E501


        :return: The display_currency of this NetworkFee.  # noqa: E501
        :rtype: str
        """
        return self._display_currency

    @display_currency.setter
    def display_currency(self, display_currency):
        """Sets the display_currency of this NetworkFee.


        :param display_currency: The display_currency of this NetworkFee.  # noqa: E501
        :type: str
        """

        self._display_currency = display_currency

    @property
    def display_amount(self):
        """Gets the display_amount of this NetworkFee.  # noqa: E501


        :return: The display_amount of this NetworkFee.  # noqa: E501
        :rtype: float
        """
        return self._display_amount

    @display_amount.setter
    def display_amount(self, display_amount):
        """Sets the display_amount of this NetworkFee.


        :param display_amount: The display_amount of this NetworkFee.  # noqa: E501
        :type: float
        """

        self._display_amount = display_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkFee, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkFee):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
