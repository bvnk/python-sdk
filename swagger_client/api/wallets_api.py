# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WalletsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def transaction_report(self, **kwargs):  # noqa: E501
        """Transactions Report  # noqa: E501

        Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transaction_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wallet_id: Date at to retrieve balances
        :param str from_date: Export range from date in format 'yyyy-MM-dd'
        :param str to_date: Export range to date in format 'yyyy-MM-dd'
        :param str format: 'json' - json format, 'csv' - csv format
        :param str transaction_type: Transaction type code
        :return: list[TransactionReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transaction_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.transaction_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def transaction_report_with_http_info(self, **kwargs):  # noqa: E501
        """Transactions Report  # noqa: E501

        Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transaction_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wallet_id: Date at to retrieve balances
        :param str from_date: Export range from date in format 'yyyy-MM-dd'
        :param str to_date: Export range to date in format 'yyyy-MM-dd'
        :param str format: 'json' - json format, 'csv' - csv format
        :param str transaction_type: Transaction type code
        :return: list[TransactionReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wallet_id', 'from_date', 'to_date', 'format', 'transaction_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transaction_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'wallet_id' in params:
            query_params.append(('walletId', params['wallet_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'transaction_type' in params:
            query_params.append(('transactionType', params['transaction_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Hawk']  # noqa: E501

        return self.api_client.call_api(
            '/api/transaction/report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TransactionReport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wallet_balance_list(self, **kwargs):  # noqa: E501
        """List Wallet Balances  # noqa: E501

        Retrieves the balances of your wallets on platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_balance_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: Date at to retrieve balances
        :return: list[Balance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_balance_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wallet_balance_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def wallet_balance_list_with_http_info(self, **kwargs):  # noqa: E501
        """List Wallet Balances  # noqa: E501

        Retrieves the balances of your wallets on platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_balance_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: Date at to retrieve balances
        :return: list[Balance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_balance_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Hawk']  # noqa: E501

        return self.api_client.call_api(
            '/api/wallet/balances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Balance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wallet_create(self, **kwargs):  # noqa: E501
        """Create Wallet  # noqa: E501

        Creates a wallet on the BVNK platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WalletRequest body:
        :return: Wallet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wallet_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def wallet_create_with_http_info(self, **kwargs):  # noqa: E501
        """Create Wallet  # noqa: E501

        Creates a wallet on the BVNK platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WalletRequest body:
        :return: Wallet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Hawk']  # noqa: E501

        return self.api_client.call_api(
            '/api/wallet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wallet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wallet_list(self, **kwargs):  # noqa: E501
        """List Wallets  # noqa: E501

        Retrieves a list of wallets on your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: start offset
        :param int max: max number results
        :return: list[Wallet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wallet_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def wallet_list_with_http_info(self, **kwargs):  # noqa: E501
        """List Wallets  # noqa: E501

        Retrieves a list of wallets on your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: start offset
        :param int max: max number results
        :return: list[Wallet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Hawk']  # noqa: E501

        return self.api_client.call_api(
            '/api/wallet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Wallet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wallet_r_get(self, id, **kwargs):  # noqa: E501
        """Get Wallet  # noqa: E501

        Retrieves a specific wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_r_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: start offset (required)
        :return: Wallet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wallet_r_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.wallet_r_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def wallet_r_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Wallet  # noqa: E501

        Retrieves a specific wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wallet_r_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: start offset (required)
        :return: Wallet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_r_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `wallet_r_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Hawk']  # noqa: E501

        return self.api_client.call_api(
            '/api/wallet/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wallet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
