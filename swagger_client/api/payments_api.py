# coding: utf-8

"""
    BVNK API Endpoints

    The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PaymentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_pay_summary_get(self, merchant_id, **kwargs):  # noqa: E501
        """List Payments  # noqa: E501

        Retrieves a list of payments on a specific Merchant ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_pay_summary_get(merchant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str merchant_id: Merchant identifier (required)
        :param str customer_reference: Customer reference
        :param str payment_external_id: Merchant payment uuid
        :param str from_date: Start date
        :param str to_date: End date
        :param float offset: Offset
        :param float max: Maximum number of items in response
        :param PaymentStatusDto status:
        :param str order: Ordering direction
        :return: list[SummaryPaymentDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_pay_summary_get_with_http_info(merchant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_pay_summary_get_with_http_info(merchant_id, **kwargs)  # noqa: E501
            return data

    def api_v1_pay_summary_get_with_http_info(self, merchant_id, **kwargs):  # noqa: E501
        """List Payments  # noqa: E501

        Retrieves a list of payments on a specific Merchant ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_pay_summary_get_with_http_info(merchant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str merchant_id: Merchant identifier (required)
        :param str customer_reference: Customer reference
        :param str payment_external_id: Merchant payment uuid
        :param str from_date: Start date
        :param str to_date: End date
        :param float offset: Offset
        :param float max: Maximum number of items in response
        :param PaymentStatusDto status:
        :param str order: Ordering direction
        :return: list[SummaryPaymentDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchant_id', 'customer_reference', 'payment_external_id', 'from_date', 'to_date', 'offset', 'max', 'status', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_pay_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'merchant_id' is set
        if ('merchant_id' not in params or
                params['merchant_id'] is None):
            raise ValueError("Missing the required parameter `merchant_id` when calling `api_v1_pay_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'merchant_id' in params:
            query_params.append(('merchantId', params['merchant_id']))  # noqa: E501
        if 'customer_reference' in params:
            query_params.append(('customerReference', params['customer_reference']))  # noqa: E501
        if 'payment_external_id' in params:
            query_params.append(('paymentExternalId', params['payment_external_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Hawk']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pay/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SummaryPaymentDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_pay_summary_post(self, body, **kwargs):  # noqa: E501
        """Create payment  # noqa: E501

        Creates a payment, either type IN or type OUT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_pay_summary_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayRequestDto body: (required)
        :return: SummaryPaymentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_pay_summary_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_pay_summary_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_pay_summary_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create payment  # noqa: E501

        Creates a payment, either type IN or type OUT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_pay_summary_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayRequestDto body: (required)
        :return: SummaryPaymentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_pay_summary_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_pay_summary_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Hawk']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pay/summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SummaryPaymentDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_pay_uuid_summary_get(self, uuid, **kwargs):  # noqa: E501
        """Get Payment  # noqa: E501

        Retrieves details of a specific payment using the UUID of the payment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_pay_uuid_summary_get(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: merchant payment uuid (required)
        :return: SummaryPaymentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_pay_uuid_summary_get_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_pay_uuid_summary_get_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def api_v1_pay_uuid_summary_get_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Get Payment  # noqa: E501

        Retrieves details of a specific payment using the UUID of the payment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_pay_uuid_summary_get_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: merchant payment uuid (required)
        :return: SummaryPaymentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_pay_uuid_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `api_v1_pay_uuid_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Hawk']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pay/{uuid}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SummaryPaymentDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_pay_validate_put(self, body, **kwargs):  # noqa: E501
        """Validate Address  # noqa: E501

        Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_pay_validate_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayOutDetailDto body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_pay_validate_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_pay_validate_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_pay_validate_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """Validate Address  # noqa: E501

        Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_pay_validate_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayOutDetailDto body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_pay_validate_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_pay_validate_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pay/validate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
